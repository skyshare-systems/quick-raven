// Generated by @wagmi/cli@1.0.0 on 5/27/2023 at 9:11:57 PM
import {
  useContractRead,
  UseContractReadConfig,
  useContractWrite,
  UseContractWriteConfig,
  usePrepareContractWrite,
  UsePrepareContractWriteConfig,
  useContractEvent,
  UseContractEventConfig,
} from "wagmi";
import {
  ReadContractResult,
  WriteContractMode,
  PrepareWriteContractResult,
} from "wagmi/actions";

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// DexAggregator
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const dexAggregatorABI = [
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "version", internalType: "uint8", type: "uint8", indexed: false },
    ],
    name: "Initialized",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "previousOwner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "newOwner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
    ],
    name: "OwnershipTransferred",
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "initialize",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "owner",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_dexRouter", internalType: "address", type: "address" },
      { name: "_tokenIn", internalType: "address", type: "address" },
      { name: "_tokenOut", internalType: "address", type: "address" },
      { name: "_amountIn", internalType: "uint256", type: "uint256" },
      { name: "_amountOutMin", internalType: "uint256", type: "uint256" },
    ],
    name: "swapToQr",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_dexRouter", internalType: "address", type: "address" },
      { name: "_tokenIn", internalType: "address", type: "address" },
      { name: "_tokenOut", internalType: "address", type: "address" },
      { name: "_amountIn", internalType: "uint256", type: "uint256" },
      { name: "_amountOutMin", internalType: "uint256", type: "uint256" },
      { name: "_to", internalType: "address", type: "address" },
    ],
    name: "swapToUser",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "newOwner", internalType: "address", type: "address" }],
    name: "transferOwnership",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "withdrawEther",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_token", internalType: "address", type: "address" }],
    name: "withdrawToken",
    outputs: [],
  },
] as const;

export const dexAggregatorAddress =
  "0x46d0E2C12C0F785Bb0bd4AE391eb82008B9C23D3" as const;

export const dexAggregatorConfig = {
  address: dexAggregatorAddress,
  abi: dexAggregatorABI,
} as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// BscUsdtToken
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const bscUsdtTokenABI = [
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "owner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "spender",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "value",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "Approval",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "version", internalType: "uint8", type: "uint8", indexed: false },
    ],
    name: "Initialized",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: true },
      {
        name: "value",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "Transfer",
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "owner", internalType: "address", type: "address" },
      { name: "spender", internalType: "address", type: "address" },
    ],
    name: "allowance",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "spender", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "approve",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "account", internalType: "address", type: "address" }],
    name: "balanceOf",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "decimals",
    outputs: [{ name: "", internalType: "uint8", type: "uint8" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "spender", internalType: "address", type: "address" },
      { name: "subtractedValue", internalType: "uint256", type: "uint256" },
    ],
    name: "decreaseAllowance",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "spender", internalType: "address", type: "address" },
      { name: "addedValue", internalType: "uint256", type: "uint256" },
    ],
    name: "increaseAllowance",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_name", internalType: "string", type: "string" },
      { name: "_ticker", internalType: "string", type: "string" },
    ],
    name: "initialize",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_account", internalType: "address", type: "address" },
      { name: "_amount", internalType: "uint256", type: "uint256" },
    ],
    name: "mint",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "name",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "symbol",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "totalSupply",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "to", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "transfer",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "transferFrom",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
] as const;

export const bscUsdtTokenAddress =
  "0x44fDA5d55Cd5bFD262DcF0b90F2F105211131d18" as const;

export const bscUsdtTokenConfig = {
  address: bscUsdtTokenAddress,
  abi: bscUsdtTokenABI,
} as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// BscUsdcToken
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const bscUsdcTokenABI = [
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "owner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "spender",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "value",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "Approval",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "version", internalType: "uint8", type: "uint8", indexed: false },
    ],
    name: "Initialized",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: true },
      {
        name: "value",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "Transfer",
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "owner", internalType: "address", type: "address" },
      { name: "spender", internalType: "address", type: "address" },
    ],
    name: "allowance",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "spender", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "approve",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "account", internalType: "address", type: "address" }],
    name: "balanceOf",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "decimals",
    outputs: [{ name: "", internalType: "uint8", type: "uint8" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "spender", internalType: "address", type: "address" },
      { name: "subtractedValue", internalType: "uint256", type: "uint256" },
    ],
    name: "decreaseAllowance",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "spender", internalType: "address", type: "address" },
      { name: "addedValue", internalType: "uint256", type: "uint256" },
    ],
    name: "increaseAllowance",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_name", internalType: "string", type: "string" },
      { name: "_ticker", internalType: "string", type: "string" },
    ],
    name: "initialize",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_account", internalType: "address", type: "address" },
      { name: "_amount", internalType: "uint256", type: "uint256" },
    ],
    name: "mint",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "name",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "symbol",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "totalSupply",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "to", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "transfer",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "transferFrom",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
] as const;

export const bscUsdcTokenAddress =
  "0x45D463BFf2e01A125298BF9271B7BAFBdBeF001f" as const;

export const bscUsdcTokenConfig = {
  address: bscUsdcTokenAddress,
  abi: bscUsdcTokenABI,
} as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// BscWethToken
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const bscWethTokenABI = [
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "owner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "spender",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "value",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "Approval",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "version", internalType: "uint8", type: "uint8", indexed: false },
    ],
    name: "Initialized",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: true },
      {
        name: "value",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "Transfer",
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "owner", internalType: "address", type: "address" },
      { name: "spender", internalType: "address", type: "address" },
    ],
    name: "allowance",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "spender", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "approve",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "account", internalType: "address", type: "address" }],
    name: "balanceOf",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "decimals",
    outputs: [{ name: "", internalType: "uint8", type: "uint8" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "spender", internalType: "address", type: "address" },
      { name: "subtractedValue", internalType: "uint256", type: "uint256" },
    ],
    name: "decreaseAllowance",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "spender", internalType: "address", type: "address" },
      { name: "addedValue", internalType: "uint256", type: "uint256" },
    ],
    name: "increaseAllowance",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_name", internalType: "string", type: "string" },
      { name: "_ticker", internalType: "string", type: "string" },
    ],
    name: "initialize",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_account", internalType: "address", type: "address" },
      { name: "_amount", internalType: "uint256", type: "uint256" },
    ],
    name: "mint",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "name",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "symbol",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "totalSupply",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "to", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "transfer",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "transferFrom",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
] as const;

export const bscWethTokenAddress =
  "0x0518f7B2391916021111BB9Ce53F35a6f8C40Fe3" as const;

export const bscWethTokenConfig = {
  address: bscWethTokenAddress,
  abi: bscWethTokenABI,
} as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// BscMaticToken
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const bscMaticTokenABI = [
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "owner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "spender",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "value",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "Approval",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "version", internalType: "uint8", type: "uint8", indexed: false },
    ],
    name: "Initialized",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: true },
      {
        name: "value",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "Transfer",
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "owner", internalType: "address", type: "address" },
      { name: "spender", internalType: "address", type: "address" },
    ],
    name: "allowance",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "spender", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "approve",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "account", internalType: "address", type: "address" }],
    name: "balanceOf",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "decimals",
    outputs: [{ name: "", internalType: "uint8", type: "uint8" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "spender", internalType: "address", type: "address" },
      { name: "subtractedValue", internalType: "uint256", type: "uint256" },
    ],
    name: "decreaseAllowance",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "spender", internalType: "address", type: "address" },
      { name: "addedValue", internalType: "uint256", type: "uint256" },
    ],
    name: "increaseAllowance",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_name", internalType: "string", type: "string" },
      { name: "_ticker", internalType: "string", type: "string" },
    ],
    name: "initialize",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_account", internalType: "address", type: "address" },
      { name: "_amount", internalType: "uint256", type: "uint256" },
    ],
    name: "mint",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "name",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "symbol",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "totalSupply",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "to", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "transfer",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "transferFrom",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
] as const;

export const bscMaticTokenAddress =
  "0x9570B7D0e54f2AAed59F6615e2be18637A82d881" as const;

export const bscMaticTokenConfig = {
  address: bscMaticTokenAddress,
  abi: bscMaticTokenABI,
} as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// MumbaiUsdtToken
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const mumbaiUsdtTokenABI = [
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "owner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "spender",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "value",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "Approval",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "version", internalType: "uint8", type: "uint8", indexed: false },
    ],
    name: "Initialized",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: true },
      {
        name: "value",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "Transfer",
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "owner", internalType: "address", type: "address" },
      { name: "spender", internalType: "address", type: "address" },
    ],
    name: "allowance",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "spender", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "approve",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "account", internalType: "address", type: "address" }],
    name: "balanceOf",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "decimals",
    outputs: [{ name: "", internalType: "uint8", type: "uint8" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "spender", internalType: "address", type: "address" },
      { name: "subtractedValue", internalType: "uint256", type: "uint256" },
    ],
    name: "decreaseAllowance",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "spender", internalType: "address", type: "address" },
      { name: "addedValue", internalType: "uint256", type: "uint256" },
    ],
    name: "increaseAllowance",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_name", internalType: "string", type: "string" },
      { name: "_ticker", internalType: "string", type: "string" },
    ],
    name: "initialize",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_account", internalType: "address", type: "address" },
      { name: "_amount", internalType: "uint256", type: "uint256" },
    ],
    name: "mint",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "name",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "symbol",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "totalSupply",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "to", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "transfer",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "transferFrom",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
] as const;

export const mumbaiUsdtTokenAddress =
  "0xa80f9A21dD4938Ef9Cc4a5CFd97d2e27973b491b" as const;

export const mumbaiUsdtTokenConfig = {
  address: mumbaiUsdtTokenAddress,
  abi: mumbaiUsdtTokenABI,
} as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// MumbaiUsdcToken
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const mumbaiUsdcTokenABI = [
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "owner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "spender",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "value",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "Approval",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "version", internalType: "uint8", type: "uint8", indexed: false },
    ],
    name: "Initialized",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: true },
      {
        name: "value",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "Transfer",
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "owner", internalType: "address", type: "address" },
      { name: "spender", internalType: "address", type: "address" },
    ],
    name: "allowance",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "spender", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "approve",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "account", internalType: "address", type: "address" }],
    name: "balanceOf",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "decimals",
    outputs: [{ name: "", internalType: "uint8", type: "uint8" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "spender", internalType: "address", type: "address" },
      { name: "subtractedValue", internalType: "uint256", type: "uint256" },
    ],
    name: "decreaseAllowance",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "spender", internalType: "address", type: "address" },
      { name: "addedValue", internalType: "uint256", type: "uint256" },
    ],
    name: "increaseAllowance",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_name", internalType: "string", type: "string" },
      { name: "_ticker", internalType: "string", type: "string" },
    ],
    name: "initialize",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_account", internalType: "address", type: "address" },
      { name: "_amount", internalType: "uint256", type: "uint256" },
    ],
    name: "mint",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "name",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "symbol",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "totalSupply",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "to", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "transfer",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "transferFrom",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
] as const;

export const mumbaiUsdcTokenAddress =
  "0xc1D7eC1a5320ed08b6B019cACC80f29905A7EEfA" as const;

export const mumbaiUsdcTokenConfig = {
  address: mumbaiUsdcTokenAddress,
  abi: mumbaiUsdcTokenABI,
} as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// MumbaiWethToken
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const mumbaiWethTokenABI = [
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "owner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "spender",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "value",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "Approval",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "version", internalType: "uint8", type: "uint8", indexed: false },
    ],
    name: "Initialized",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: true },
      {
        name: "value",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "Transfer",
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "owner", internalType: "address", type: "address" },
      { name: "spender", internalType: "address", type: "address" },
    ],
    name: "allowance",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "spender", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "approve",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "account", internalType: "address", type: "address" }],
    name: "balanceOf",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "decimals",
    outputs: [{ name: "", internalType: "uint8", type: "uint8" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "spender", internalType: "address", type: "address" },
      { name: "subtractedValue", internalType: "uint256", type: "uint256" },
    ],
    name: "decreaseAllowance",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "spender", internalType: "address", type: "address" },
      { name: "addedValue", internalType: "uint256", type: "uint256" },
    ],
    name: "increaseAllowance",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_name", internalType: "string", type: "string" },
      { name: "_ticker", internalType: "string", type: "string" },
    ],
    name: "initialize",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_account", internalType: "address", type: "address" },
      { name: "_amount", internalType: "uint256", type: "uint256" },
    ],
    name: "mint",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "name",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "symbol",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "totalSupply",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "to", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "transfer",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "transferFrom",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
] as const;

export const mumbaiWethTokenAddress =
  "0xe3aF098836c4641f8EcF9185E49F8C3E74d91348" as const;

export const mumbaiWethTokenConfig = {
  address: mumbaiWethTokenAddress,
  abi: mumbaiWethTokenABI,
} as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// MumbaiMaticToken
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const mumbaiMaticTokenABI = [
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "owner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "spender",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "value",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "Approval",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "version", internalType: "uint8", type: "uint8", indexed: false },
    ],
    name: "Initialized",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: true },
      {
        name: "value",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "Transfer",
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "owner", internalType: "address", type: "address" },
      { name: "spender", internalType: "address", type: "address" },
    ],
    name: "allowance",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "spender", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "approve",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "account", internalType: "address", type: "address" }],
    name: "balanceOf",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "decimals",
    outputs: [{ name: "", internalType: "uint8", type: "uint8" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "spender", internalType: "address", type: "address" },
      { name: "subtractedValue", internalType: "uint256", type: "uint256" },
    ],
    name: "decreaseAllowance",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "spender", internalType: "address", type: "address" },
      { name: "addedValue", internalType: "uint256", type: "uint256" },
    ],
    name: "increaseAllowance",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_name", internalType: "string", type: "string" },
      { name: "_ticker", internalType: "string", type: "string" },
    ],
    name: "initialize",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_account", internalType: "address", type: "address" },
      { name: "_amount", internalType: "uint256", type: "uint256" },
    ],
    name: "mint",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "name",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "symbol",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "totalSupply",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "to", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "transfer",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "transferFrom",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
] as const;

export const mumbaiMaticTokenAddress =
  "0xDe7B766c83ddd2177087d8f6F8916A3B18722669" as const;

export const mumbaiMaticTokenConfig = {
  address: mumbaiMaticTokenAddress,
  abi: mumbaiMaticTokenABI,
} as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// MumbaiUsdtMaticLp
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const mumbaiUsdtMaticLpABI = [
  {
    payable: false,
    stateMutability: "nonpayable",
    type: "constructor",
    inputs: [],
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "owner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "spender",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "value",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "Approval",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "sender",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "amount0",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
      {
        name: "amount1",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
      { name: "to", internalType: "address", type: "address", indexed: true },
    ],
    name: "Burn",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "sender",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "amount0",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
      {
        name: "amount1",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "Mint",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "sender",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "amount0In",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
      {
        name: "amount1In",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
      {
        name: "amount0Out",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
      {
        name: "amount1Out",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
      { name: "to", internalType: "address", type: "address", indexed: true },
    ],
    name: "Swap",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "reserve0",
        internalType: "uint112",
        type: "uint112",
        indexed: false,
      },
      {
        name: "reserve1",
        internalType: "uint112",
        type: "uint112",
        indexed: false,
      },
    ],
    name: "Sync",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: true },
      {
        name: "value",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "Transfer",
  },
  {
    constant: true,
    payable: false,
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "DOMAIN_SEPARATOR",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "MINIMUM_LIQUIDITY",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "PERMIT_TYPEHASH",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "address", type: "address" },
    ],
    name: "allowance",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "spender", internalType: "address", type: "address" },
      { name: "value", internalType: "uint256", type: "uint256" },
    ],
    name: "approve",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "balanceOf",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "to", internalType: "address", type: "address" }],
    name: "burn",
    outputs: [
      { name: "amount0", internalType: "uint256", type: "uint256" },
      { name: "amount1", internalType: "uint256", type: "uint256" },
    ],
  },
  {
    constant: true,
    payable: false,
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "decimals",
    outputs: [{ name: "", internalType: "uint8", type: "uint8" }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "factory",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "getReserves",
    outputs: [
      { name: "_reserve0", internalType: "uint112", type: "uint112" },
      { name: "_reserve1", internalType: "uint112", type: "uint112" },
      { name: "_blockTimestampLast", internalType: "uint32", type: "uint32" },
    ],
  },
  {
    constant: false,
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_token0", internalType: "address", type: "address" },
      { name: "_token1", internalType: "address", type: "address" },
    ],
    name: "initialize",
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "kLast",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "to", internalType: "address", type: "address" }],
    name: "mint",
    outputs: [{ name: "liquidity", internalType: "uint256", type: "uint256" }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "name",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "nonces",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "owner", internalType: "address", type: "address" },
      { name: "spender", internalType: "address", type: "address" },
      { name: "value", internalType: "uint256", type: "uint256" },
      { name: "deadline", internalType: "uint256", type: "uint256" },
      { name: "v", internalType: "uint8", type: "uint8" },
      { name: "r", internalType: "bytes32", type: "bytes32" },
      { name: "s", internalType: "bytes32", type: "bytes32" },
    ],
    name: "permit",
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "price0CumulativeLast",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "price1CumulativeLast",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "to", internalType: "address", type: "address" }],
    name: "skim",
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "amount0Out", internalType: "uint256", type: "uint256" },
      { name: "amount1Out", internalType: "uint256", type: "uint256" },
      { name: "to", internalType: "address", type: "address" },
      { name: "data", internalType: "bytes", type: "bytes" },
    ],
    name: "swap",
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "symbol",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "sync",
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "token0",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "token1",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "totalSupply",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "to", internalType: "address", type: "address" },
      { name: "value", internalType: "uint256", type: "uint256" },
    ],
    name: "transfer",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "value", internalType: "uint256", type: "uint256" },
    ],
    name: "transferFrom",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
] as const;

export const mumbaiUsdtMaticLpAddress =
  "0x8d1D0089736a2f3A9eCAe08a356dCB337F55234b" as const;

export const mumbaiUsdtMaticLpConfig = {
  address: mumbaiUsdtMaticLpAddress,
  abi: mumbaiUsdtMaticLpABI,
} as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dexAggregatorABI}__.
 */
export function useDexAggregatorRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof dexAggregatorABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof dexAggregatorABI, TFunctionName, TSelectData>,
    "abi" | "address"
  > = {} as any
) {
  return useContractRead({
    abi: dexAggregatorABI,
    address: dexAggregatorAddress,
    ...config,
  } as UseContractReadConfig<typeof dexAggregatorABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dexAggregatorABI}__ and `functionName` set to `"owner"`.
 */
export function useDexAggregatorOwner<
  TFunctionName extends "owner",
  TSelectData = ReadContractResult<typeof dexAggregatorABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof dexAggregatorABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: dexAggregatorABI,
    address: dexAggregatorAddress,
    functionName: "owner",
    ...config,
  } as UseContractReadConfig<typeof dexAggregatorABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dexAggregatorABI}__.
 */
export function useDexAggregatorWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof dexAggregatorABI,
          string
        >["request"]["abi"],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof dexAggregatorABI, TFunctionName, TMode> & {
        abi?: never;
      } = {} as any
) {
  return useContractWrite<typeof dexAggregatorABI, TFunctionName, TMode>({
    abi: dexAggregatorABI,
    address: dexAggregatorAddress,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dexAggregatorABI}__ and `functionName` set to `"initialize"`.
 */
export function useDexAggregatorInitialize<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof dexAggregatorABI,
          "initialize"
        >["request"]["abi"],
        "initialize",
        TMode
      > & { functionName?: "initialize" }
    : UseContractWriteConfig<typeof dexAggregatorABI, "initialize", TMode> & {
        abi?: never;
        functionName?: "initialize";
      } = {} as any
) {
  return useContractWrite<typeof dexAggregatorABI, "initialize", TMode>({
    abi: dexAggregatorABI,
    address: dexAggregatorAddress,
    functionName: "initialize",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dexAggregatorABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useDexAggregatorRenounceOwnership<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof dexAggregatorABI,
          "renounceOwnership"
        >["request"]["abi"],
        "renounceOwnership",
        TMode
      > & { functionName?: "renounceOwnership" }
    : UseContractWriteConfig<
        typeof dexAggregatorABI,
        "renounceOwnership",
        TMode
      > & {
        abi?: never;
        functionName?: "renounceOwnership";
      } = {} as any
) {
  return useContractWrite<typeof dexAggregatorABI, "renounceOwnership", TMode>({
    abi: dexAggregatorABI,
    address: dexAggregatorAddress,
    functionName: "renounceOwnership",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dexAggregatorABI}__ and `functionName` set to `"swapToQr"`.
 */
export function useDexAggregatorSwapToQr<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof dexAggregatorABI,
          "swapToQr"
        >["request"]["abi"],
        "swapToQr",
        TMode
      > & { functionName?: "swapToQr" }
    : UseContractWriteConfig<typeof dexAggregatorABI, "swapToQr", TMode> & {
        abi?: never;
        functionName?: "swapToQr";
      } = {} as any
) {
  return useContractWrite<typeof dexAggregatorABI, "swapToQr", TMode>({
    abi: dexAggregatorABI,
    address: dexAggregatorAddress,
    functionName: "swapToQr",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dexAggregatorABI}__ and `functionName` set to `"swapToUser"`.
 */
export function useDexAggregatorSwapToUser<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof dexAggregatorABI,
          "swapToUser"
        >["request"]["abi"],
        "swapToUser",
        TMode
      > & { functionName?: "swapToUser" }
    : UseContractWriteConfig<typeof dexAggregatorABI, "swapToUser", TMode> & {
        abi?: never;
        functionName?: "swapToUser";
      } = {} as any
) {
  return useContractWrite<typeof dexAggregatorABI, "swapToUser", TMode>({
    abi: dexAggregatorABI,
    address: dexAggregatorAddress,
    functionName: "swapToUser",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dexAggregatorABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useDexAggregatorTransferOwnership<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof dexAggregatorABI,
          "transferOwnership"
        >["request"]["abi"],
        "transferOwnership",
        TMode
      > & { functionName?: "transferOwnership" }
    : UseContractWriteConfig<
        typeof dexAggregatorABI,
        "transferOwnership",
        TMode
      > & {
        abi?: never;
        functionName?: "transferOwnership";
      } = {} as any
) {
  return useContractWrite<typeof dexAggregatorABI, "transferOwnership", TMode>({
    abi: dexAggregatorABI,
    address: dexAggregatorAddress,
    functionName: "transferOwnership",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dexAggregatorABI}__ and `functionName` set to `"withdrawEther"`.
 */
export function useDexAggregatorWithdrawEther<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof dexAggregatorABI,
          "withdrawEther"
        >["request"]["abi"],
        "withdrawEther",
        TMode
      > & { functionName?: "withdrawEther" }
    : UseContractWriteConfig<
        typeof dexAggregatorABI,
        "withdrawEther",
        TMode
      > & {
        abi?: never;
        functionName?: "withdrawEther";
      } = {} as any
) {
  return useContractWrite<typeof dexAggregatorABI, "withdrawEther", TMode>({
    abi: dexAggregatorABI,
    address: dexAggregatorAddress,
    functionName: "withdrawEther",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dexAggregatorABI}__ and `functionName` set to `"withdrawToken"`.
 */
export function useDexAggregatorWithdrawToken<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof dexAggregatorABI,
          "withdrawToken"
        >["request"]["abi"],
        "withdrawToken",
        TMode
      > & { functionName?: "withdrawToken" }
    : UseContractWriteConfig<
        typeof dexAggregatorABI,
        "withdrawToken",
        TMode
      > & {
        abi?: never;
        functionName?: "withdrawToken";
      } = {} as any
) {
  return useContractWrite<typeof dexAggregatorABI, "withdrawToken", TMode>({
    abi: dexAggregatorABI,
    address: dexAggregatorAddress,
    functionName: "withdrawToken",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dexAggregatorABI}__.
 */
export function usePrepareDexAggregatorWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof dexAggregatorABI, TFunctionName>,
    "abi" | "address"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: dexAggregatorABI,
    address: dexAggregatorAddress,
    ...config,
  } as UsePrepareContractWriteConfig<typeof dexAggregatorABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dexAggregatorABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareDexAggregatorInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof dexAggregatorABI, "initialize">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: dexAggregatorABI,
    address: dexAggregatorAddress,
    functionName: "initialize",
    ...config,
  } as UsePrepareContractWriteConfig<typeof dexAggregatorABI, "initialize">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dexAggregatorABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareDexAggregatorRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof dexAggregatorABI, "renounceOwnership">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: dexAggregatorABI,
    address: dexAggregatorAddress,
    functionName: "renounceOwnership",
    ...config,
  } as UsePrepareContractWriteConfig<typeof dexAggregatorABI, "renounceOwnership">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dexAggregatorABI}__ and `functionName` set to `"swapToQr"`.
 */
export function usePrepareDexAggregatorSwapToQr(
  config: Omit<
    UsePrepareContractWriteConfig<typeof dexAggregatorABI, "swapToQr">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: dexAggregatorABI,
    address: dexAggregatorAddress,
    functionName: "swapToQr",
    ...config,
  } as UsePrepareContractWriteConfig<typeof dexAggregatorABI, "swapToQr">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dexAggregatorABI}__ and `functionName` set to `"swapToUser"`.
 */
export function usePrepareDexAggregatorSwapToUser(
  config: Omit<
    UsePrepareContractWriteConfig<typeof dexAggregatorABI, "swapToUser">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: dexAggregatorABI,
    address: dexAggregatorAddress,
    functionName: "swapToUser",
    ...config,
  } as UsePrepareContractWriteConfig<typeof dexAggregatorABI, "swapToUser">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dexAggregatorABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareDexAggregatorTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof dexAggregatorABI, "transferOwnership">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: dexAggregatorABI,
    address: dexAggregatorAddress,
    functionName: "transferOwnership",
    ...config,
  } as UsePrepareContractWriteConfig<typeof dexAggregatorABI, "transferOwnership">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dexAggregatorABI}__ and `functionName` set to `"withdrawEther"`.
 */
export function usePrepareDexAggregatorWithdrawEther(
  config: Omit<
    UsePrepareContractWriteConfig<typeof dexAggregatorABI, "withdrawEther">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: dexAggregatorABI,
    address: dexAggregatorAddress,
    functionName: "withdrawEther",
    ...config,
  } as UsePrepareContractWriteConfig<typeof dexAggregatorABI, "withdrawEther">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dexAggregatorABI}__ and `functionName` set to `"withdrawToken"`.
 */
export function usePrepareDexAggregatorWithdrawToken(
  config: Omit<
    UsePrepareContractWriteConfig<typeof dexAggregatorABI, "withdrawToken">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: dexAggregatorABI,
    address: dexAggregatorAddress,
    functionName: "withdrawToken",
    ...config,
  } as UsePrepareContractWriteConfig<typeof dexAggregatorABI, "withdrawToken">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dexAggregatorABI}__.
 */
export function useDexAggregatorEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof dexAggregatorABI, TEventName>,
    "abi" | "address"
  > = {} as any
) {
  return useContractEvent({
    abi: dexAggregatorABI,
    address: dexAggregatorAddress,
    ...config,
  } as UseContractEventConfig<typeof dexAggregatorABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dexAggregatorABI}__ and `eventName` set to `"Initialized"`.
 */
export function useDexAggregatorInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof dexAggregatorABI, "Initialized">,
    "abi" | "address" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: dexAggregatorABI,
    address: dexAggregatorAddress,
    eventName: "Initialized",
    ...config,
  } as UseContractEventConfig<typeof dexAggregatorABI, "Initialized">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dexAggregatorABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useDexAggregatorOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof dexAggregatorABI, "OwnershipTransferred">,
    "abi" | "address" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: dexAggregatorABI,
    address: dexAggregatorAddress,
    eventName: "OwnershipTransferred",
    ...config,
  } as UseContractEventConfig<typeof dexAggregatorABI, "OwnershipTransferred">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bscUsdtTokenABI}__.
 */
export function useBscUsdtTokenRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof bscUsdtTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof bscUsdtTokenABI, TFunctionName, TSelectData>,
    "abi" | "address"
  > = {} as any
) {
  return useContractRead({
    abi: bscUsdtTokenABI,
    address: bscUsdtTokenAddress,
    ...config,
  } as UseContractReadConfig<typeof bscUsdtTokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bscUsdtTokenABI}__ and `functionName` set to `"allowance"`.
 */
export function useBscUsdtTokenAllowance<
  TFunctionName extends "allowance",
  TSelectData = ReadContractResult<typeof bscUsdtTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof bscUsdtTokenABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: bscUsdtTokenABI,
    address: bscUsdtTokenAddress,
    functionName: "allowance",
    ...config,
  } as UseContractReadConfig<typeof bscUsdtTokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bscUsdtTokenABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useBscUsdtTokenBalanceOf<
  TFunctionName extends "balanceOf",
  TSelectData = ReadContractResult<typeof bscUsdtTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof bscUsdtTokenABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: bscUsdtTokenABI,
    address: bscUsdtTokenAddress,
    functionName: "balanceOf",
    ...config,
  } as UseContractReadConfig<typeof bscUsdtTokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bscUsdtTokenABI}__ and `functionName` set to `"decimals"`.
 */
export function useBscUsdtTokenDecimals<
  TFunctionName extends "decimals",
  TSelectData = ReadContractResult<typeof bscUsdtTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof bscUsdtTokenABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: bscUsdtTokenABI,
    address: bscUsdtTokenAddress,
    functionName: "decimals",
    ...config,
  } as UseContractReadConfig<typeof bscUsdtTokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bscUsdtTokenABI}__ and `functionName` set to `"name"`.
 */
export function useBscUsdtTokenName<
  TFunctionName extends "name",
  TSelectData = ReadContractResult<typeof bscUsdtTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof bscUsdtTokenABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: bscUsdtTokenABI,
    address: bscUsdtTokenAddress,
    functionName: "name",
    ...config,
  } as UseContractReadConfig<typeof bscUsdtTokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bscUsdtTokenABI}__ and `functionName` set to `"symbol"`.
 */
export function useBscUsdtTokenSymbol<
  TFunctionName extends "symbol",
  TSelectData = ReadContractResult<typeof bscUsdtTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof bscUsdtTokenABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: bscUsdtTokenABI,
    address: bscUsdtTokenAddress,
    functionName: "symbol",
    ...config,
  } as UseContractReadConfig<typeof bscUsdtTokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bscUsdtTokenABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useBscUsdtTokenTotalSupply<
  TFunctionName extends "totalSupply",
  TSelectData = ReadContractResult<typeof bscUsdtTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof bscUsdtTokenABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: bscUsdtTokenABI,
    address: bscUsdtTokenAddress,
    functionName: "totalSupply",
    ...config,
  } as UseContractReadConfig<typeof bscUsdtTokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bscUsdtTokenABI}__.
 */
export function useBscUsdtTokenWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof bscUsdtTokenABI,
          string
        >["request"]["abi"],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof bscUsdtTokenABI, TFunctionName, TMode> & {
        abi?: never;
      } = {} as any
) {
  return useContractWrite<typeof bscUsdtTokenABI, TFunctionName, TMode>({
    abi: bscUsdtTokenABI,
    address: bscUsdtTokenAddress,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bscUsdtTokenABI}__ and `functionName` set to `"approve"`.
 */
export function useBscUsdtTokenApprove<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof bscUsdtTokenABI,
          "approve"
        >["request"]["abi"],
        "approve",
        TMode
      > & { functionName?: "approve" }
    : UseContractWriteConfig<typeof bscUsdtTokenABI, "approve", TMode> & {
        abi?: never;
        functionName?: "approve";
      } = {} as any
) {
  return useContractWrite<typeof bscUsdtTokenABI, "approve", TMode>({
    abi: bscUsdtTokenABI,
    address: bscUsdtTokenAddress,
    functionName: "approve",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bscUsdtTokenABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function useBscUsdtTokenDecreaseAllowance<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof bscUsdtTokenABI,
          "decreaseAllowance"
        >["request"]["abi"],
        "decreaseAllowance",
        TMode
      > & { functionName?: "decreaseAllowance" }
    : UseContractWriteConfig<
        typeof bscUsdtTokenABI,
        "decreaseAllowance",
        TMode
      > & {
        abi?: never;
        functionName?: "decreaseAllowance";
      } = {} as any
) {
  return useContractWrite<typeof bscUsdtTokenABI, "decreaseAllowance", TMode>({
    abi: bscUsdtTokenABI,
    address: bscUsdtTokenAddress,
    functionName: "decreaseAllowance",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bscUsdtTokenABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function useBscUsdtTokenIncreaseAllowance<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof bscUsdtTokenABI,
          "increaseAllowance"
        >["request"]["abi"],
        "increaseAllowance",
        TMode
      > & { functionName?: "increaseAllowance" }
    : UseContractWriteConfig<
        typeof bscUsdtTokenABI,
        "increaseAllowance",
        TMode
      > & {
        abi?: never;
        functionName?: "increaseAllowance";
      } = {} as any
) {
  return useContractWrite<typeof bscUsdtTokenABI, "increaseAllowance", TMode>({
    abi: bscUsdtTokenABI,
    address: bscUsdtTokenAddress,
    functionName: "increaseAllowance",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bscUsdtTokenABI}__ and `functionName` set to `"initialize"`.
 */
export function useBscUsdtTokenInitialize<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof bscUsdtTokenABI,
          "initialize"
        >["request"]["abi"],
        "initialize",
        TMode
      > & { functionName?: "initialize" }
    : UseContractWriteConfig<typeof bscUsdtTokenABI, "initialize", TMode> & {
        abi?: never;
        functionName?: "initialize";
      } = {} as any
) {
  return useContractWrite<typeof bscUsdtTokenABI, "initialize", TMode>({
    abi: bscUsdtTokenABI,
    address: bscUsdtTokenAddress,
    functionName: "initialize",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bscUsdtTokenABI}__ and `functionName` set to `"mint"`.
 */
export function useBscUsdtTokenMint<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof bscUsdtTokenABI,
          "mint"
        >["request"]["abi"],
        "mint",
        TMode
      > & { functionName?: "mint" }
    : UseContractWriteConfig<typeof bscUsdtTokenABI, "mint", TMode> & {
        abi?: never;
        functionName?: "mint";
      } = {} as any
) {
  return useContractWrite<typeof bscUsdtTokenABI, "mint", TMode>({
    abi: bscUsdtTokenABI,
    address: bscUsdtTokenAddress,
    functionName: "mint",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bscUsdtTokenABI}__ and `functionName` set to `"transfer"`.
 */
export function useBscUsdtTokenTransfer<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof bscUsdtTokenABI,
          "transfer"
        >["request"]["abi"],
        "transfer",
        TMode
      > & { functionName?: "transfer" }
    : UseContractWriteConfig<typeof bscUsdtTokenABI, "transfer", TMode> & {
        abi?: never;
        functionName?: "transfer";
      } = {} as any
) {
  return useContractWrite<typeof bscUsdtTokenABI, "transfer", TMode>({
    abi: bscUsdtTokenABI,
    address: bscUsdtTokenAddress,
    functionName: "transfer",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bscUsdtTokenABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useBscUsdtTokenTransferFrom<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof bscUsdtTokenABI,
          "transferFrom"
        >["request"]["abi"],
        "transferFrom",
        TMode
      > & { functionName?: "transferFrom" }
    : UseContractWriteConfig<typeof bscUsdtTokenABI, "transferFrom", TMode> & {
        abi?: never;
        functionName?: "transferFrom";
      } = {} as any
) {
  return useContractWrite<typeof bscUsdtTokenABI, "transferFrom", TMode>({
    abi: bscUsdtTokenABI,
    address: bscUsdtTokenAddress,
    functionName: "transferFrom",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bscUsdtTokenABI}__.
 */
export function usePrepareBscUsdtTokenWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bscUsdtTokenABI, TFunctionName>,
    "abi" | "address"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: bscUsdtTokenABI,
    address: bscUsdtTokenAddress,
    ...config,
  } as UsePrepareContractWriteConfig<typeof bscUsdtTokenABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bscUsdtTokenABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareBscUsdtTokenApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bscUsdtTokenABI, "approve">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: bscUsdtTokenABI,
    address: bscUsdtTokenAddress,
    functionName: "approve",
    ...config,
  } as UsePrepareContractWriteConfig<typeof bscUsdtTokenABI, "approve">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bscUsdtTokenABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function usePrepareBscUsdtTokenDecreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bscUsdtTokenABI, "decreaseAllowance">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: bscUsdtTokenABI,
    address: bscUsdtTokenAddress,
    functionName: "decreaseAllowance",
    ...config,
  } as UsePrepareContractWriteConfig<typeof bscUsdtTokenABI, "decreaseAllowance">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bscUsdtTokenABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function usePrepareBscUsdtTokenIncreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bscUsdtTokenABI, "increaseAllowance">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: bscUsdtTokenABI,
    address: bscUsdtTokenAddress,
    functionName: "increaseAllowance",
    ...config,
  } as UsePrepareContractWriteConfig<typeof bscUsdtTokenABI, "increaseAllowance">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bscUsdtTokenABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareBscUsdtTokenInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bscUsdtTokenABI, "initialize">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: bscUsdtTokenABI,
    address: bscUsdtTokenAddress,
    functionName: "initialize",
    ...config,
  } as UsePrepareContractWriteConfig<typeof bscUsdtTokenABI, "initialize">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bscUsdtTokenABI}__ and `functionName` set to `"mint"`.
 */
export function usePrepareBscUsdtTokenMint(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bscUsdtTokenABI, "mint">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: bscUsdtTokenABI,
    address: bscUsdtTokenAddress,
    functionName: "mint",
    ...config,
  } as UsePrepareContractWriteConfig<typeof bscUsdtTokenABI, "mint">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bscUsdtTokenABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareBscUsdtTokenTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bscUsdtTokenABI, "transfer">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: bscUsdtTokenABI,
    address: bscUsdtTokenAddress,
    functionName: "transfer",
    ...config,
  } as UsePrepareContractWriteConfig<typeof bscUsdtTokenABI, "transfer">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bscUsdtTokenABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareBscUsdtTokenTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bscUsdtTokenABI, "transferFrom">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: bscUsdtTokenABI,
    address: bscUsdtTokenAddress,
    functionName: "transferFrom",
    ...config,
  } as UsePrepareContractWriteConfig<typeof bscUsdtTokenABI, "transferFrom">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bscUsdtTokenABI}__.
 */
export function useBscUsdtTokenEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof bscUsdtTokenABI, TEventName>,
    "abi" | "address"
  > = {} as any
) {
  return useContractEvent({
    abi: bscUsdtTokenABI,
    address: bscUsdtTokenAddress,
    ...config,
  } as UseContractEventConfig<typeof bscUsdtTokenABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bscUsdtTokenABI}__ and `eventName` set to `"Approval"`.
 */
export function useBscUsdtTokenApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof bscUsdtTokenABI, "Approval">,
    "abi" | "address" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: bscUsdtTokenABI,
    address: bscUsdtTokenAddress,
    eventName: "Approval",
    ...config,
  } as UseContractEventConfig<typeof bscUsdtTokenABI, "Approval">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bscUsdtTokenABI}__ and `eventName` set to `"Initialized"`.
 */
export function useBscUsdtTokenInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof bscUsdtTokenABI, "Initialized">,
    "abi" | "address" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: bscUsdtTokenABI,
    address: bscUsdtTokenAddress,
    eventName: "Initialized",
    ...config,
  } as UseContractEventConfig<typeof bscUsdtTokenABI, "Initialized">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bscUsdtTokenABI}__ and `eventName` set to `"Transfer"`.
 */
export function useBscUsdtTokenTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof bscUsdtTokenABI, "Transfer">,
    "abi" | "address" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: bscUsdtTokenABI,
    address: bscUsdtTokenAddress,
    eventName: "Transfer",
    ...config,
  } as UseContractEventConfig<typeof bscUsdtTokenABI, "Transfer">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bscUsdcTokenABI}__.
 */
export function useBscUsdcTokenRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof bscUsdcTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof bscUsdcTokenABI, TFunctionName, TSelectData>,
    "abi" | "address"
  > = {} as any
) {
  return useContractRead({
    abi: bscUsdcTokenABI,
    address: bscUsdcTokenAddress,
    ...config,
  } as UseContractReadConfig<typeof bscUsdcTokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bscUsdcTokenABI}__ and `functionName` set to `"allowance"`.
 */
export function useBscUsdcTokenAllowance<
  TFunctionName extends "allowance",
  TSelectData = ReadContractResult<typeof bscUsdcTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof bscUsdcTokenABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: bscUsdcTokenABI,
    address: bscUsdcTokenAddress,
    functionName: "allowance",
    ...config,
  } as UseContractReadConfig<typeof bscUsdcTokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bscUsdcTokenABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useBscUsdcTokenBalanceOf<
  TFunctionName extends "balanceOf",
  TSelectData = ReadContractResult<typeof bscUsdcTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof bscUsdcTokenABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: bscUsdcTokenABI,
    address: bscUsdcTokenAddress,
    functionName: "balanceOf",
    ...config,
  } as UseContractReadConfig<typeof bscUsdcTokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bscUsdcTokenABI}__ and `functionName` set to `"decimals"`.
 */
export function useBscUsdcTokenDecimals<
  TFunctionName extends "decimals",
  TSelectData = ReadContractResult<typeof bscUsdcTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof bscUsdcTokenABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: bscUsdcTokenABI,
    address: bscUsdcTokenAddress,
    functionName: "decimals",
    ...config,
  } as UseContractReadConfig<typeof bscUsdcTokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bscUsdcTokenABI}__ and `functionName` set to `"name"`.
 */
export function useBscUsdcTokenName<
  TFunctionName extends "name",
  TSelectData = ReadContractResult<typeof bscUsdcTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof bscUsdcTokenABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: bscUsdcTokenABI,
    address: bscUsdcTokenAddress,
    functionName: "name",
    ...config,
  } as UseContractReadConfig<typeof bscUsdcTokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bscUsdcTokenABI}__ and `functionName` set to `"symbol"`.
 */
export function useBscUsdcTokenSymbol<
  TFunctionName extends "symbol",
  TSelectData = ReadContractResult<typeof bscUsdcTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof bscUsdcTokenABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: bscUsdcTokenABI,
    address: bscUsdcTokenAddress,
    functionName: "symbol",
    ...config,
  } as UseContractReadConfig<typeof bscUsdcTokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bscUsdcTokenABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useBscUsdcTokenTotalSupply<
  TFunctionName extends "totalSupply",
  TSelectData = ReadContractResult<typeof bscUsdcTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof bscUsdcTokenABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: bscUsdcTokenABI,
    address: bscUsdcTokenAddress,
    functionName: "totalSupply",
    ...config,
  } as UseContractReadConfig<typeof bscUsdcTokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bscUsdcTokenABI}__.
 */
export function useBscUsdcTokenWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof bscUsdcTokenABI,
          string
        >["request"]["abi"],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof bscUsdcTokenABI, TFunctionName, TMode> & {
        abi?: never;
      } = {} as any
) {
  return useContractWrite<typeof bscUsdcTokenABI, TFunctionName, TMode>({
    abi: bscUsdcTokenABI,
    address: bscUsdcTokenAddress,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bscUsdcTokenABI}__ and `functionName` set to `"approve"`.
 */
export function useBscUsdcTokenApprove<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof bscUsdcTokenABI,
          "approve"
        >["request"]["abi"],
        "approve",
        TMode
      > & { functionName?: "approve" }
    : UseContractWriteConfig<typeof bscUsdcTokenABI, "approve", TMode> & {
        abi?: never;
        functionName?: "approve";
      } = {} as any
) {
  return useContractWrite<typeof bscUsdcTokenABI, "approve", TMode>({
    abi: bscUsdcTokenABI,
    address: bscUsdcTokenAddress,
    functionName: "approve",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bscUsdcTokenABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function useBscUsdcTokenDecreaseAllowance<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof bscUsdcTokenABI,
          "decreaseAllowance"
        >["request"]["abi"],
        "decreaseAllowance",
        TMode
      > & { functionName?: "decreaseAllowance" }
    : UseContractWriteConfig<
        typeof bscUsdcTokenABI,
        "decreaseAllowance",
        TMode
      > & {
        abi?: never;
        functionName?: "decreaseAllowance";
      } = {} as any
) {
  return useContractWrite<typeof bscUsdcTokenABI, "decreaseAllowance", TMode>({
    abi: bscUsdcTokenABI,
    address: bscUsdcTokenAddress,
    functionName: "decreaseAllowance",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bscUsdcTokenABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function useBscUsdcTokenIncreaseAllowance<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof bscUsdcTokenABI,
          "increaseAllowance"
        >["request"]["abi"],
        "increaseAllowance",
        TMode
      > & { functionName?: "increaseAllowance" }
    : UseContractWriteConfig<
        typeof bscUsdcTokenABI,
        "increaseAllowance",
        TMode
      > & {
        abi?: never;
        functionName?: "increaseAllowance";
      } = {} as any
) {
  return useContractWrite<typeof bscUsdcTokenABI, "increaseAllowance", TMode>({
    abi: bscUsdcTokenABI,
    address: bscUsdcTokenAddress,
    functionName: "increaseAllowance",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bscUsdcTokenABI}__ and `functionName` set to `"initialize"`.
 */
export function useBscUsdcTokenInitialize<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof bscUsdcTokenABI,
          "initialize"
        >["request"]["abi"],
        "initialize",
        TMode
      > & { functionName?: "initialize" }
    : UseContractWriteConfig<typeof bscUsdcTokenABI, "initialize", TMode> & {
        abi?: never;
        functionName?: "initialize";
      } = {} as any
) {
  return useContractWrite<typeof bscUsdcTokenABI, "initialize", TMode>({
    abi: bscUsdcTokenABI,
    address: bscUsdcTokenAddress,
    functionName: "initialize",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bscUsdcTokenABI}__ and `functionName` set to `"mint"`.
 */
export function useBscUsdcTokenMint<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof bscUsdcTokenABI,
          "mint"
        >["request"]["abi"],
        "mint",
        TMode
      > & { functionName?: "mint" }
    : UseContractWriteConfig<typeof bscUsdcTokenABI, "mint", TMode> & {
        abi?: never;
        functionName?: "mint";
      } = {} as any
) {
  return useContractWrite<typeof bscUsdcTokenABI, "mint", TMode>({
    abi: bscUsdcTokenABI,
    address: bscUsdcTokenAddress,
    functionName: "mint",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bscUsdcTokenABI}__ and `functionName` set to `"transfer"`.
 */
export function useBscUsdcTokenTransfer<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof bscUsdcTokenABI,
          "transfer"
        >["request"]["abi"],
        "transfer",
        TMode
      > & { functionName?: "transfer" }
    : UseContractWriteConfig<typeof bscUsdcTokenABI, "transfer", TMode> & {
        abi?: never;
        functionName?: "transfer";
      } = {} as any
) {
  return useContractWrite<typeof bscUsdcTokenABI, "transfer", TMode>({
    abi: bscUsdcTokenABI,
    address: bscUsdcTokenAddress,
    functionName: "transfer",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bscUsdcTokenABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useBscUsdcTokenTransferFrom<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof bscUsdcTokenABI,
          "transferFrom"
        >["request"]["abi"],
        "transferFrom",
        TMode
      > & { functionName?: "transferFrom" }
    : UseContractWriteConfig<typeof bscUsdcTokenABI, "transferFrom", TMode> & {
        abi?: never;
        functionName?: "transferFrom";
      } = {} as any
) {
  return useContractWrite<typeof bscUsdcTokenABI, "transferFrom", TMode>({
    abi: bscUsdcTokenABI,
    address: bscUsdcTokenAddress,
    functionName: "transferFrom",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bscUsdcTokenABI}__.
 */
export function usePrepareBscUsdcTokenWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bscUsdcTokenABI, TFunctionName>,
    "abi" | "address"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: bscUsdcTokenABI,
    address: bscUsdcTokenAddress,
    ...config,
  } as UsePrepareContractWriteConfig<typeof bscUsdcTokenABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bscUsdcTokenABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareBscUsdcTokenApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bscUsdcTokenABI, "approve">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: bscUsdcTokenABI,
    address: bscUsdcTokenAddress,
    functionName: "approve",
    ...config,
  } as UsePrepareContractWriteConfig<typeof bscUsdcTokenABI, "approve">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bscUsdcTokenABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function usePrepareBscUsdcTokenDecreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bscUsdcTokenABI, "decreaseAllowance">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: bscUsdcTokenABI,
    address: bscUsdcTokenAddress,
    functionName: "decreaseAllowance",
    ...config,
  } as UsePrepareContractWriteConfig<typeof bscUsdcTokenABI, "decreaseAllowance">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bscUsdcTokenABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function usePrepareBscUsdcTokenIncreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bscUsdcTokenABI, "increaseAllowance">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: bscUsdcTokenABI,
    address: bscUsdcTokenAddress,
    functionName: "increaseAllowance",
    ...config,
  } as UsePrepareContractWriteConfig<typeof bscUsdcTokenABI, "increaseAllowance">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bscUsdcTokenABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareBscUsdcTokenInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bscUsdcTokenABI, "initialize">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: bscUsdcTokenABI,
    address: bscUsdcTokenAddress,
    functionName: "initialize",
    ...config,
  } as UsePrepareContractWriteConfig<typeof bscUsdcTokenABI, "initialize">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bscUsdcTokenABI}__ and `functionName` set to `"mint"`.
 */
export function usePrepareBscUsdcTokenMint(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bscUsdcTokenABI, "mint">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: bscUsdcTokenABI,
    address: bscUsdcTokenAddress,
    functionName: "mint",
    ...config,
  } as UsePrepareContractWriteConfig<typeof bscUsdcTokenABI, "mint">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bscUsdcTokenABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareBscUsdcTokenTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bscUsdcTokenABI, "transfer">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: bscUsdcTokenABI,
    address: bscUsdcTokenAddress,
    functionName: "transfer",
    ...config,
  } as UsePrepareContractWriteConfig<typeof bscUsdcTokenABI, "transfer">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bscUsdcTokenABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareBscUsdcTokenTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bscUsdcTokenABI, "transferFrom">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: bscUsdcTokenABI,
    address: bscUsdcTokenAddress,
    functionName: "transferFrom",
    ...config,
  } as UsePrepareContractWriteConfig<typeof bscUsdcTokenABI, "transferFrom">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bscUsdcTokenABI}__.
 */
export function useBscUsdcTokenEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof bscUsdcTokenABI, TEventName>,
    "abi" | "address"
  > = {} as any
) {
  return useContractEvent({
    abi: bscUsdcTokenABI,
    address: bscUsdcTokenAddress,
    ...config,
  } as UseContractEventConfig<typeof bscUsdcTokenABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bscUsdcTokenABI}__ and `eventName` set to `"Approval"`.
 */
export function useBscUsdcTokenApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof bscUsdcTokenABI, "Approval">,
    "abi" | "address" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: bscUsdcTokenABI,
    address: bscUsdcTokenAddress,
    eventName: "Approval",
    ...config,
  } as UseContractEventConfig<typeof bscUsdcTokenABI, "Approval">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bscUsdcTokenABI}__ and `eventName` set to `"Initialized"`.
 */
export function useBscUsdcTokenInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof bscUsdcTokenABI, "Initialized">,
    "abi" | "address" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: bscUsdcTokenABI,
    address: bscUsdcTokenAddress,
    eventName: "Initialized",
    ...config,
  } as UseContractEventConfig<typeof bscUsdcTokenABI, "Initialized">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bscUsdcTokenABI}__ and `eventName` set to `"Transfer"`.
 */
export function useBscUsdcTokenTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof bscUsdcTokenABI, "Transfer">,
    "abi" | "address" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: bscUsdcTokenABI,
    address: bscUsdcTokenAddress,
    eventName: "Transfer",
    ...config,
  } as UseContractEventConfig<typeof bscUsdcTokenABI, "Transfer">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bscWethTokenABI}__.
 */
export function useBscWethTokenRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof bscWethTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof bscWethTokenABI, TFunctionName, TSelectData>,
    "abi" | "address"
  > = {} as any
) {
  return useContractRead({
    abi: bscWethTokenABI,
    address: bscWethTokenAddress,
    ...config,
  } as UseContractReadConfig<typeof bscWethTokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bscWethTokenABI}__ and `functionName` set to `"allowance"`.
 */
export function useBscWethTokenAllowance<
  TFunctionName extends "allowance",
  TSelectData = ReadContractResult<typeof bscWethTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof bscWethTokenABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: bscWethTokenABI,
    address: bscWethTokenAddress,
    functionName: "allowance",
    ...config,
  } as UseContractReadConfig<typeof bscWethTokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bscWethTokenABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useBscWethTokenBalanceOf<
  TFunctionName extends "balanceOf",
  TSelectData = ReadContractResult<typeof bscWethTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof bscWethTokenABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: bscWethTokenABI,
    address: bscWethTokenAddress,
    functionName: "balanceOf",
    ...config,
  } as UseContractReadConfig<typeof bscWethTokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bscWethTokenABI}__ and `functionName` set to `"decimals"`.
 */
export function useBscWethTokenDecimals<
  TFunctionName extends "decimals",
  TSelectData = ReadContractResult<typeof bscWethTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof bscWethTokenABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: bscWethTokenABI,
    address: bscWethTokenAddress,
    functionName: "decimals",
    ...config,
  } as UseContractReadConfig<typeof bscWethTokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bscWethTokenABI}__ and `functionName` set to `"name"`.
 */
export function useBscWethTokenName<
  TFunctionName extends "name",
  TSelectData = ReadContractResult<typeof bscWethTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof bscWethTokenABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: bscWethTokenABI,
    address: bscWethTokenAddress,
    functionName: "name",
    ...config,
  } as UseContractReadConfig<typeof bscWethTokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bscWethTokenABI}__ and `functionName` set to `"symbol"`.
 */
export function useBscWethTokenSymbol<
  TFunctionName extends "symbol",
  TSelectData = ReadContractResult<typeof bscWethTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof bscWethTokenABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: bscWethTokenABI,
    address: bscWethTokenAddress,
    functionName: "symbol",
    ...config,
  } as UseContractReadConfig<typeof bscWethTokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bscWethTokenABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useBscWethTokenTotalSupply<
  TFunctionName extends "totalSupply",
  TSelectData = ReadContractResult<typeof bscWethTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof bscWethTokenABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: bscWethTokenABI,
    address: bscWethTokenAddress,
    functionName: "totalSupply",
    ...config,
  } as UseContractReadConfig<typeof bscWethTokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bscWethTokenABI}__.
 */
export function useBscWethTokenWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof bscWethTokenABI,
          string
        >["request"]["abi"],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof bscWethTokenABI, TFunctionName, TMode> & {
        abi?: never;
      } = {} as any
) {
  return useContractWrite<typeof bscWethTokenABI, TFunctionName, TMode>({
    abi: bscWethTokenABI,
    address: bscWethTokenAddress,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bscWethTokenABI}__ and `functionName` set to `"approve"`.
 */
export function useBscWethTokenApprove<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof bscWethTokenABI,
          "approve"
        >["request"]["abi"],
        "approve",
        TMode
      > & { functionName?: "approve" }
    : UseContractWriteConfig<typeof bscWethTokenABI, "approve", TMode> & {
        abi?: never;
        functionName?: "approve";
      } = {} as any
) {
  return useContractWrite<typeof bscWethTokenABI, "approve", TMode>({
    abi: bscWethTokenABI,
    address: bscWethTokenAddress,
    functionName: "approve",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bscWethTokenABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function useBscWethTokenDecreaseAllowance<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof bscWethTokenABI,
          "decreaseAllowance"
        >["request"]["abi"],
        "decreaseAllowance",
        TMode
      > & { functionName?: "decreaseAllowance" }
    : UseContractWriteConfig<
        typeof bscWethTokenABI,
        "decreaseAllowance",
        TMode
      > & {
        abi?: never;
        functionName?: "decreaseAllowance";
      } = {} as any
) {
  return useContractWrite<typeof bscWethTokenABI, "decreaseAllowance", TMode>({
    abi: bscWethTokenABI,
    address: bscWethTokenAddress,
    functionName: "decreaseAllowance",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bscWethTokenABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function useBscWethTokenIncreaseAllowance<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof bscWethTokenABI,
          "increaseAllowance"
        >["request"]["abi"],
        "increaseAllowance",
        TMode
      > & { functionName?: "increaseAllowance" }
    : UseContractWriteConfig<
        typeof bscWethTokenABI,
        "increaseAllowance",
        TMode
      > & {
        abi?: never;
        functionName?: "increaseAllowance";
      } = {} as any
) {
  return useContractWrite<typeof bscWethTokenABI, "increaseAllowance", TMode>({
    abi: bscWethTokenABI,
    address: bscWethTokenAddress,
    functionName: "increaseAllowance",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bscWethTokenABI}__ and `functionName` set to `"initialize"`.
 */
export function useBscWethTokenInitialize<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof bscWethTokenABI,
          "initialize"
        >["request"]["abi"],
        "initialize",
        TMode
      > & { functionName?: "initialize" }
    : UseContractWriteConfig<typeof bscWethTokenABI, "initialize", TMode> & {
        abi?: never;
        functionName?: "initialize";
      } = {} as any
) {
  return useContractWrite<typeof bscWethTokenABI, "initialize", TMode>({
    abi: bscWethTokenABI,
    address: bscWethTokenAddress,
    functionName: "initialize",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bscWethTokenABI}__ and `functionName` set to `"mint"`.
 */
export function useBscWethTokenMint<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof bscWethTokenABI,
          "mint"
        >["request"]["abi"],
        "mint",
        TMode
      > & { functionName?: "mint" }
    : UseContractWriteConfig<typeof bscWethTokenABI, "mint", TMode> & {
        abi?: never;
        functionName?: "mint";
      } = {} as any
) {
  return useContractWrite<typeof bscWethTokenABI, "mint", TMode>({
    abi: bscWethTokenABI,
    address: bscWethTokenAddress,
    functionName: "mint",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bscWethTokenABI}__ and `functionName` set to `"transfer"`.
 */
export function useBscWethTokenTransfer<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof bscWethTokenABI,
          "transfer"
        >["request"]["abi"],
        "transfer",
        TMode
      > & { functionName?: "transfer" }
    : UseContractWriteConfig<typeof bscWethTokenABI, "transfer", TMode> & {
        abi?: never;
        functionName?: "transfer";
      } = {} as any
) {
  return useContractWrite<typeof bscWethTokenABI, "transfer", TMode>({
    abi: bscWethTokenABI,
    address: bscWethTokenAddress,
    functionName: "transfer",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bscWethTokenABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useBscWethTokenTransferFrom<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof bscWethTokenABI,
          "transferFrom"
        >["request"]["abi"],
        "transferFrom",
        TMode
      > & { functionName?: "transferFrom" }
    : UseContractWriteConfig<typeof bscWethTokenABI, "transferFrom", TMode> & {
        abi?: never;
        functionName?: "transferFrom";
      } = {} as any
) {
  return useContractWrite<typeof bscWethTokenABI, "transferFrom", TMode>({
    abi: bscWethTokenABI,
    address: bscWethTokenAddress,
    functionName: "transferFrom",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bscWethTokenABI}__.
 */
export function usePrepareBscWethTokenWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bscWethTokenABI, TFunctionName>,
    "abi" | "address"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: bscWethTokenABI,
    address: bscWethTokenAddress,
    ...config,
  } as UsePrepareContractWriteConfig<typeof bscWethTokenABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bscWethTokenABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareBscWethTokenApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bscWethTokenABI, "approve">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: bscWethTokenABI,
    address: bscWethTokenAddress,
    functionName: "approve",
    ...config,
  } as UsePrepareContractWriteConfig<typeof bscWethTokenABI, "approve">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bscWethTokenABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function usePrepareBscWethTokenDecreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bscWethTokenABI, "decreaseAllowance">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: bscWethTokenABI,
    address: bscWethTokenAddress,
    functionName: "decreaseAllowance",
    ...config,
  } as UsePrepareContractWriteConfig<typeof bscWethTokenABI, "decreaseAllowance">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bscWethTokenABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function usePrepareBscWethTokenIncreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bscWethTokenABI, "increaseAllowance">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: bscWethTokenABI,
    address: bscWethTokenAddress,
    functionName: "increaseAllowance",
    ...config,
  } as UsePrepareContractWriteConfig<typeof bscWethTokenABI, "increaseAllowance">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bscWethTokenABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareBscWethTokenInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bscWethTokenABI, "initialize">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: bscWethTokenABI,
    address: bscWethTokenAddress,
    functionName: "initialize",
    ...config,
  } as UsePrepareContractWriteConfig<typeof bscWethTokenABI, "initialize">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bscWethTokenABI}__ and `functionName` set to `"mint"`.
 */
export function usePrepareBscWethTokenMint(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bscWethTokenABI, "mint">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: bscWethTokenABI,
    address: bscWethTokenAddress,
    functionName: "mint",
    ...config,
  } as UsePrepareContractWriteConfig<typeof bscWethTokenABI, "mint">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bscWethTokenABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareBscWethTokenTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bscWethTokenABI, "transfer">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: bscWethTokenABI,
    address: bscWethTokenAddress,
    functionName: "transfer",
    ...config,
  } as UsePrepareContractWriteConfig<typeof bscWethTokenABI, "transfer">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bscWethTokenABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareBscWethTokenTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bscWethTokenABI, "transferFrom">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: bscWethTokenABI,
    address: bscWethTokenAddress,
    functionName: "transferFrom",
    ...config,
  } as UsePrepareContractWriteConfig<typeof bscWethTokenABI, "transferFrom">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bscWethTokenABI}__.
 */
export function useBscWethTokenEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof bscWethTokenABI, TEventName>,
    "abi" | "address"
  > = {} as any
) {
  return useContractEvent({
    abi: bscWethTokenABI,
    address: bscWethTokenAddress,
    ...config,
  } as UseContractEventConfig<typeof bscWethTokenABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bscWethTokenABI}__ and `eventName` set to `"Approval"`.
 */
export function useBscWethTokenApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof bscWethTokenABI, "Approval">,
    "abi" | "address" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: bscWethTokenABI,
    address: bscWethTokenAddress,
    eventName: "Approval",
    ...config,
  } as UseContractEventConfig<typeof bscWethTokenABI, "Approval">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bscWethTokenABI}__ and `eventName` set to `"Initialized"`.
 */
export function useBscWethTokenInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof bscWethTokenABI, "Initialized">,
    "abi" | "address" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: bscWethTokenABI,
    address: bscWethTokenAddress,
    eventName: "Initialized",
    ...config,
  } as UseContractEventConfig<typeof bscWethTokenABI, "Initialized">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bscWethTokenABI}__ and `eventName` set to `"Transfer"`.
 */
export function useBscWethTokenTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof bscWethTokenABI, "Transfer">,
    "abi" | "address" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: bscWethTokenABI,
    address: bscWethTokenAddress,
    eventName: "Transfer",
    ...config,
  } as UseContractEventConfig<typeof bscWethTokenABI, "Transfer">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bscMaticTokenABI}__.
 */
export function useBscMaticTokenRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof bscMaticTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof bscMaticTokenABI, TFunctionName, TSelectData>,
    "abi" | "address"
  > = {} as any
) {
  return useContractRead({
    abi: bscMaticTokenABI,
    address: bscMaticTokenAddress,
    ...config,
  } as UseContractReadConfig<typeof bscMaticTokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bscMaticTokenABI}__ and `functionName` set to `"allowance"`.
 */
export function useBscMaticTokenAllowance<
  TFunctionName extends "allowance",
  TSelectData = ReadContractResult<typeof bscMaticTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof bscMaticTokenABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: bscMaticTokenABI,
    address: bscMaticTokenAddress,
    functionName: "allowance",
    ...config,
  } as UseContractReadConfig<typeof bscMaticTokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bscMaticTokenABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useBscMaticTokenBalanceOf<
  TFunctionName extends "balanceOf",
  TSelectData = ReadContractResult<typeof bscMaticTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof bscMaticTokenABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: bscMaticTokenABI,
    address: bscMaticTokenAddress,
    functionName: "balanceOf",
    ...config,
  } as UseContractReadConfig<typeof bscMaticTokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bscMaticTokenABI}__ and `functionName` set to `"decimals"`.
 */
export function useBscMaticTokenDecimals<
  TFunctionName extends "decimals",
  TSelectData = ReadContractResult<typeof bscMaticTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof bscMaticTokenABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: bscMaticTokenABI,
    address: bscMaticTokenAddress,
    functionName: "decimals",
    ...config,
  } as UseContractReadConfig<typeof bscMaticTokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bscMaticTokenABI}__ and `functionName` set to `"name"`.
 */
export function useBscMaticTokenName<
  TFunctionName extends "name",
  TSelectData = ReadContractResult<typeof bscMaticTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof bscMaticTokenABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: bscMaticTokenABI,
    address: bscMaticTokenAddress,
    functionName: "name",
    ...config,
  } as UseContractReadConfig<typeof bscMaticTokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bscMaticTokenABI}__ and `functionName` set to `"symbol"`.
 */
export function useBscMaticTokenSymbol<
  TFunctionName extends "symbol",
  TSelectData = ReadContractResult<typeof bscMaticTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof bscMaticTokenABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: bscMaticTokenABI,
    address: bscMaticTokenAddress,
    functionName: "symbol",
    ...config,
  } as UseContractReadConfig<typeof bscMaticTokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bscMaticTokenABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useBscMaticTokenTotalSupply<
  TFunctionName extends "totalSupply",
  TSelectData = ReadContractResult<typeof bscMaticTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof bscMaticTokenABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: bscMaticTokenABI,
    address: bscMaticTokenAddress,
    functionName: "totalSupply",
    ...config,
  } as UseContractReadConfig<typeof bscMaticTokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bscMaticTokenABI}__.
 */
export function useBscMaticTokenWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof bscMaticTokenABI,
          string
        >["request"]["abi"],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof bscMaticTokenABI, TFunctionName, TMode> & {
        abi?: never;
      } = {} as any
) {
  return useContractWrite<typeof bscMaticTokenABI, TFunctionName, TMode>({
    abi: bscMaticTokenABI,
    address: bscMaticTokenAddress,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bscMaticTokenABI}__ and `functionName` set to `"approve"`.
 */
export function useBscMaticTokenApprove<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof bscMaticTokenABI,
          "approve"
        >["request"]["abi"],
        "approve",
        TMode
      > & { functionName?: "approve" }
    : UseContractWriteConfig<typeof bscMaticTokenABI, "approve", TMode> & {
        abi?: never;
        functionName?: "approve";
      } = {} as any
) {
  return useContractWrite<typeof bscMaticTokenABI, "approve", TMode>({
    abi: bscMaticTokenABI,
    address: bscMaticTokenAddress,
    functionName: "approve",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bscMaticTokenABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function useBscMaticTokenDecreaseAllowance<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof bscMaticTokenABI,
          "decreaseAllowance"
        >["request"]["abi"],
        "decreaseAllowance",
        TMode
      > & { functionName?: "decreaseAllowance" }
    : UseContractWriteConfig<
        typeof bscMaticTokenABI,
        "decreaseAllowance",
        TMode
      > & {
        abi?: never;
        functionName?: "decreaseAllowance";
      } = {} as any
) {
  return useContractWrite<typeof bscMaticTokenABI, "decreaseAllowance", TMode>({
    abi: bscMaticTokenABI,
    address: bscMaticTokenAddress,
    functionName: "decreaseAllowance",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bscMaticTokenABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function useBscMaticTokenIncreaseAllowance<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof bscMaticTokenABI,
          "increaseAllowance"
        >["request"]["abi"],
        "increaseAllowance",
        TMode
      > & { functionName?: "increaseAllowance" }
    : UseContractWriteConfig<
        typeof bscMaticTokenABI,
        "increaseAllowance",
        TMode
      > & {
        abi?: never;
        functionName?: "increaseAllowance";
      } = {} as any
) {
  return useContractWrite<typeof bscMaticTokenABI, "increaseAllowance", TMode>({
    abi: bscMaticTokenABI,
    address: bscMaticTokenAddress,
    functionName: "increaseAllowance",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bscMaticTokenABI}__ and `functionName` set to `"initialize"`.
 */
export function useBscMaticTokenInitialize<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof bscMaticTokenABI,
          "initialize"
        >["request"]["abi"],
        "initialize",
        TMode
      > & { functionName?: "initialize" }
    : UseContractWriteConfig<typeof bscMaticTokenABI, "initialize", TMode> & {
        abi?: never;
        functionName?: "initialize";
      } = {} as any
) {
  return useContractWrite<typeof bscMaticTokenABI, "initialize", TMode>({
    abi: bscMaticTokenABI,
    address: bscMaticTokenAddress,
    functionName: "initialize",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bscMaticTokenABI}__ and `functionName` set to `"mint"`.
 */
export function useBscMaticTokenMint<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof bscMaticTokenABI,
          "mint"
        >["request"]["abi"],
        "mint",
        TMode
      > & { functionName?: "mint" }
    : UseContractWriteConfig<typeof bscMaticTokenABI, "mint", TMode> & {
        abi?: never;
        functionName?: "mint";
      } = {} as any
) {
  return useContractWrite<typeof bscMaticTokenABI, "mint", TMode>({
    abi: bscMaticTokenABI,
    address: bscMaticTokenAddress,
    functionName: "mint",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bscMaticTokenABI}__ and `functionName` set to `"transfer"`.
 */
export function useBscMaticTokenTransfer<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof bscMaticTokenABI,
          "transfer"
        >["request"]["abi"],
        "transfer",
        TMode
      > & { functionName?: "transfer" }
    : UseContractWriteConfig<typeof bscMaticTokenABI, "transfer", TMode> & {
        abi?: never;
        functionName?: "transfer";
      } = {} as any
) {
  return useContractWrite<typeof bscMaticTokenABI, "transfer", TMode>({
    abi: bscMaticTokenABI,
    address: bscMaticTokenAddress,
    functionName: "transfer",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bscMaticTokenABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useBscMaticTokenTransferFrom<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof bscMaticTokenABI,
          "transferFrom"
        >["request"]["abi"],
        "transferFrom",
        TMode
      > & { functionName?: "transferFrom" }
    : UseContractWriteConfig<typeof bscMaticTokenABI, "transferFrom", TMode> & {
        abi?: never;
        functionName?: "transferFrom";
      } = {} as any
) {
  return useContractWrite<typeof bscMaticTokenABI, "transferFrom", TMode>({
    abi: bscMaticTokenABI,
    address: bscMaticTokenAddress,
    functionName: "transferFrom",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bscMaticTokenABI}__.
 */
export function usePrepareBscMaticTokenWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bscMaticTokenABI, TFunctionName>,
    "abi" | "address"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: bscMaticTokenABI,
    address: bscMaticTokenAddress,
    ...config,
  } as UsePrepareContractWriteConfig<typeof bscMaticTokenABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bscMaticTokenABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareBscMaticTokenApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bscMaticTokenABI, "approve">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: bscMaticTokenABI,
    address: bscMaticTokenAddress,
    functionName: "approve",
    ...config,
  } as UsePrepareContractWriteConfig<typeof bscMaticTokenABI, "approve">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bscMaticTokenABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function usePrepareBscMaticTokenDecreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bscMaticTokenABI, "decreaseAllowance">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: bscMaticTokenABI,
    address: bscMaticTokenAddress,
    functionName: "decreaseAllowance",
    ...config,
  } as UsePrepareContractWriteConfig<typeof bscMaticTokenABI, "decreaseAllowance">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bscMaticTokenABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function usePrepareBscMaticTokenIncreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bscMaticTokenABI, "increaseAllowance">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: bscMaticTokenABI,
    address: bscMaticTokenAddress,
    functionName: "increaseAllowance",
    ...config,
  } as UsePrepareContractWriteConfig<typeof bscMaticTokenABI, "increaseAllowance">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bscMaticTokenABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareBscMaticTokenInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bscMaticTokenABI, "initialize">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: bscMaticTokenABI,
    address: bscMaticTokenAddress,
    functionName: "initialize",
    ...config,
  } as UsePrepareContractWriteConfig<typeof bscMaticTokenABI, "initialize">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bscMaticTokenABI}__ and `functionName` set to `"mint"`.
 */
export function usePrepareBscMaticTokenMint(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bscMaticTokenABI, "mint">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: bscMaticTokenABI,
    address: bscMaticTokenAddress,
    functionName: "mint",
    ...config,
  } as UsePrepareContractWriteConfig<typeof bscMaticTokenABI, "mint">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bscMaticTokenABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareBscMaticTokenTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bscMaticTokenABI, "transfer">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: bscMaticTokenABI,
    address: bscMaticTokenAddress,
    functionName: "transfer",
    ...config,
  } as UsePrepareContractWriteConfig<typeof bscMaticTokenABI, "transfer">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bscMaticTokenABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareBscMaticTokenTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bscMaticTokenABI, "transferFrom">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: bscMaticTokenABI,
    address: bscMaticTokenAddress,
    functionName: "transferFrom",
    ...config,
  } as UsePrepareContractWriteConfig<typeof bscMaticTokenABI, "transferFrom">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bscMaticTokenABI}__.
 */
export function useBscMaticTokenEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof bscMaticTokenABI, TEventName>,
    "abi" | "address"
  > = {} as any
) {
  return useContractEvent({
    abi: bscMaticTokenABI,
    address: bscMaticTokenAddress,
    ...config,
  } as UseContractEventConfig<typeof bscMaticTokenABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bscMaticTokenABI}__ and `eventName` set to `"Approval"`.
 */
export function useBscMaticTokenApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof bscMaticTokenABI, "Approval">,
    "abi" | "address" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: bscMaticTokenABI,
    address: bscMaticTokenAddress,
    eventName: "Approval",
    ...config,
  } as UseContractEventConfig<typeof bscMaticTokenABI, "Approval">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bscMaticTokenABI}__ and `eventName` set to `"Initialized"`.
 */
export function useBscMaticTokenInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof bscMaticTokenABI, "Initialized">,
    "abi" | "address" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: bscMaticTokenABI,
    address: bscMaticTokenAddress,
    eventName: "Initialized",
    ...config,
  } as UseContractEventConfig<typeof bscMaticTokenABI, "Initialized">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bscMaticTokenABI}__ and `eventName` set to `"Transfer"`.
 */
export function useBscMaticTokenTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof bscMaticTokenABI, "Transfer">,
    "abi" | "address" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: bscMaticTokenABI,
    address: bscMaticTokenAddress,
    eventName: "Transfer",
    ...config,
  } as UseContractEventConfig<typeof bscMaticTokenABI, "Transfer">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mumbaiUsdtTokenABI}__.
 */
export function useMumbaiUsdtTokenRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof mumbaiUsdtTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<
      typeof mumbaiUsdtTokenABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "address"
  > = {} as any
) {
  return useContractRead({
    abi: mumbaiUsdtTokenABI,
    address: mumbaiUsdtTokenAddress,
    ...config,
  } as UseContractReadConfig<typeof mumbaiUsdtTokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mumbaiUsdtTokenABI}__ and `functionName` set to `"allowance"`.
 */
export function useMumbaiUsdtTokenAllowance<
  TFunctionName extends "allowance",
  TSelectData = ReadContractResult<typeof mumbaiUsdtTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<
      typeof mumbaiUsdtTokenABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: mumbaiUsdtTokenABI,
    address: mumbaiUsdtTokenAddress,
    functionName: "allowance",
    ...config,
  } as UseContractReadConfig<typeof mumbaiUsdtTokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mumbaiUsdtTokenABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useMumbaiUsdtTokenBalanceOf<
  TFunctionName extends "balanceOf",
  TSelectData = ReadContractResult<typeof mumbaiUsdtTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<
      typeof mumbaiUsdtTokenABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: mumbaiUsdtTokenABI,
    address: mumbaiUsdtTokenAddress,
    functionName: "balanceOf",
    ...config,
  } as UseContractReadConfig<typeof mumbaiUsdtTokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mumbaiUsdtTokenABI}__ and `functionName` set to `"decimals"`.
 */
export function useMumbaiUsdtTokenDecimals<
  TFunctionName extends "decimals",
  TSelectData = ReadContractResult<typeof mumbaiUsdtTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<
      typeof mumbaiUsdtTokenABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: mumbaiUsdtTokenABI,
    address: mumbaiUsdtTokenAddress,
    functionName: "decimals",
    ...config,
  } as UseContractReadConfig<typeof mumbaiUsdtTokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mumbaiUsdtTokenABI}__ and `functionName` set to `"name"`.
 */
export function useMumbaiUsdtTokenName<
  TFunctionName extends "name",
  TSelectData = ReadContractResult<typeof mumbaiUsdtTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<
      typeof mumbaiUsdtTokenABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: mumbaiUsdtTokenABI,
    address: mumbaiUsdtTokenAddress,
    functionName: "name",
    ...config,
  } as UseContractReadConfig<typeof mumbaiUsdtTokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mumbaiUsdtTokenABI}__ and `functionName` set to `"symbol"`.
 */
export function useMumbaiUsdtTokenSymbol<
  TFunctionName extends "symbol",
  TSelectData = ReadContractResult<typeof mumbaiUsdtTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<
      typeof mumbaiUsdtTokenABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: mumbaiUsdtTokenABI,
    address: mumbaiUsdtTokenAddress,
    functionName: "symbol",
    ...config,
  } as UseContractReadConfig<typeof mumbaiUsdtTokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mumbaiUsdtTokenABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useMumbaiUsdtTokenTotalSupply<
  TFunctionName extends "totalSupply",
  TSelectData = ReadContractResult<typeof mumbaiUsdtTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<
      typeof mumbaiUsdtTokenABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: mumbaiUsdtTokenABI,
    address: mumbaiUsdtTokenAddress,
    functionName: "totalSupply",
    ...config,
  } as UseContractReadConfig<typeof mumbaiUsdtTokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mumbaiUsdtTokenABI}__.
 */
export function useMumbaiUsdtTokenWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof mumbaiUsdtTokenABI,
          string
        >["request"]["abi"],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof mumbaiUsdtTokenABI,
        TFunctionName,
        TMode
      > & {
        abi?: never;
      } = {} as any
) {
  return useContractWrite<typeof mumbaiUsdtTokenABI, TFunctionName, TMode>({
    abi: mumbaiUsdtTokenABI,
    address: mumbaiUsdtTokenAddress,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mumbaiUsdtTokenABI}__ and `functionName` set to `"approve"`.
 */
export function useMumbaiUsdtTokenApprove<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof mumbaiUsdtTokenABI,
          "approve"
        >["request"]["abi"],
        "approve",
        TMode
      > & { functionName?: "approve" }
    : UseContractWriteConfig<typeof mumbaiUsdtTokenABI, "approve", TMode> & {
        abi?: never;
        functionName?: "approve";
      } = {} as any
) {
  return useContractWrite<typeof mumbaiUsdtTokenABI, "approve", TMode>({
    abi: mumbaiUsdtTokenABI,
    address: mumbaiUsdtTokenAddress,
    functionName: "approve",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mumbaiUsdtTokenABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function useMumbaiUsdtTokenDecreaseAllowance<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof mumbaiUsdtTokenABI,
          "decreaseAllowance"
        >["request"]["abi"],
        "decreaseAllowance",
        TMode
      > & { functionName?: "decreaseAllowance" }
    : UseContractWriteConfig<
        typeof mumbaiUsdtTokenABI,
        "decreaseAllowance",
        TMode
      > & {
        abi?: never;
        functionName?: "decreaseAllowance";
      } = {} as any
) {
  return useContractWrite<
    typeof mumbaiUsdtTokenABI,
    "decreaseAllowance",
    TMode
  >({
    abi: mumbaiUsdtTokenABI,
    address: mumbaiUsdtTokenAddress,
    functionName: "decreaseAllowance",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mumbaiUsdtTokenABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function useMumbaiUsdtTokenIncreaseAllowance<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof mumbaiUsdtTokenABI,
          "increaseAllowance"
        >["request"]["abi"],
        "increaseAllowance",
        TMode
      > & { functionName?: "increaseAllowance" }
    : UseContractWriteConfig<
        typeof mumbaiUsdtTokenABI,
        "increaseAllowance",
        TMode
      > & {
        abi?: never;
        functionName?: "increaseAllowance";
      } = {} as any
) {
  return useContractWrite<
    typeof mumbaiUsdtTokenABI,
    "increaseAllowance",
    TMode
  >({
    abi: mumbaiUsdtTokenABI,
    address: mumbaiUsdtTokenAddress,
    functionName: "increaseAllowance",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mumbaiUsdtTokenABI}__ and `functionName` set to `"initialize"`.
 */
export function useMumbaiUsdtTokenInitialize<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof mumbaiUsdtTokenABI,
          "initialize"
        >["request"]["abi"],
        "initialize",
        TMode
      > & { functionName?: "initialize" }
    : UseContractWriteConfig<typeof mumbaiUsdtTokenABI, "initialize", TMode> & {
        abi?: never;
        functionName?: "initialize";
      } = {} as any
) {
  return useContractWrite<typeof mumbaiUsdtTokenABI, "initialize", TMode>({
    abi: mumbaiUsdtTokenABI,
    address: mumbaiUsdtTokenAddress,
    functionName: "initialize",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mumbaiUsdtTokenABI}__ and `functionName` set to `"mint"`.
 */
export function useMumbaiUsdtTokenMint<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof mumbaiUsdtTokenABI,
          "mint"
        >["request"]["abi"],
        "mint",
        TMode
      > & { functionName?: "mint" }
    : UseContractWriteConfig<typeof mumbaiUsdtTokenABI, "mint", TMode> & {
        abi?: never;
        functionName?: "mint";
      } = {} as any
) {
  return useContractWrite<typeof mumbaiUsdtTokenABI, "mint", TMode>({
    abi: mumbaiUsdtTokenABI,
    address: mumbaiUsdtTokenAddress,
    functionName: "mint",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mumbaiUsdtTokenABI}__ and `functionName` set to `"transfer"`.
 */
export function useMumbaiUsdtTokenTransfer<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof mumbaiUsdtTokenABI,
          "transfer"
        >["request"]["abi"],
        "transfer",
        TMode
      > & { functionName?: "transfer" }
    : UseContractWriteConfig<typeof mumbaiUsdtTokenABI, "transfer", TMode> & {
        abi?: never;
        functionName?: "transfer";
      } = {} as any
) {
  return useContractWrite<typeof mumbaiUsdtTokenABI, "transfer", TMode>({
    abi: mumbaiUsdtTokenABI,
    address: mumbaiUsdtTokenAddress,
    functionName: "transfer",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mumbaiUsdtTokenABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useMumbaiUsdtTokenTransferFrom<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof mumbaiUsdtTokenABI,
          "transferFrom"
        >["request"]["abi"],
        "transferFrom",
        TMode
      > & { functionName?: "transferFrom" }
    : UseContractWriteConfig<
        typeof mumbaiUsdtTokenABI,
        "transferFrom",
        TMode
      > & {
        abi?: never;
        functionName?: "transferFrom";
      } = {} as any
) {
  return useContractWrite<typeof mumbaiUsdtTokenABI, "transferFrom", TMode>({
    abi: mumbaiUsdtTokenABI,
    address: mumbaiUsdtTokenAddress,
    functionName: "transferFrom",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mumbaiUsdtTokenABI}__.
 */
export function usePrepareMumbaiUsdtTokenWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mumbaiUsdtTokenABI, TFunctionName>,
    "abi" | "address"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: mumbaiUsdtTokenABI,
    address: mumbaiUsdtTokenAddress,
    ...config,
  } as UsePrepareContractWriteConfig<typeof mumbaiUsdtTokenABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mumbaiUsdtTokenABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareMumbaiUsdtTokenApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mumbaiUsdtTokenABI, "approve">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: mumbaiUsdtTokenABI,
    address: mumbaiUsdtTokenAddress,
    functionName: "approve",
    ...config,
  } as UsePrepareContractWriteConfig<typeof mumbaiUsdtTokenABI, "approve">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mumbaiUsdtTokenABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function usePrepareMumbaiUsdtTokenDecreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof mumbaiUsdtTokenABI,
      "decreaseAllowance"
    >,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: mumbaiUsdtTokenABI,
    address: mumbaiUsdtTokenAddress,
    functionName: "decreaseAllowance",
    ...config,
  } as UsePrepareContractWriteConfig<typeof mumbaiUsdtTokenABI, "decreaseAllowance">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mumbaiUsdtTokenABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function usePrepareMumbaiUsdtTokenIncreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof mumbaiUsdtTokenABI,
      "increaseAllowance"
    >,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: mumbaiUsdtTokenABI,
    address: mumbaiUsdtTokenAddress,
    functionName: "increaseAllowance",
    ...config,
  } as UsePrepareContractWriteConfig<typeof mumbaiUsdtTokenABI, "increaseAllowance">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mumbaiUsdtTokenABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareMumbaiUsdtTokenInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mumbaiUsdtTokenABI, "initialize">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: mumbaiUsdtTokenABI,
    address: mumbaiUsdtTokenAddress,
    functionName: "initialize",
    ...config,
  } as UsePrepareContractWriteConfig<typeof mumbaiUsdtTokenABI, "initialize">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mumbaiUsdtTokenABI}__ and `functionName` set to `"mint"`.
 */
export function usePrepareMumbaiUsdtTokenMint(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mumbaiUsdtTokenABI, "mint">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: mumbaiUsdtTokenABI,
    address: mumbaiUsdtTokenAddress,
    functionName: "mint",
    ...config,
  } as UsePrepareContractWriteConfig<typeof mumbaiUsdtTokenABI, "mint">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mumbaiUsdtTokenABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareMumbaiUsdtTokenTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mumbaiUsdtTokenABI, "transfer">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: mumbaiUsdtTokenABI,
    address: mumbaiUsdtTokenAddress,
    functionName: "transfer",
    ...config,
  } as UsePrepareContractWriteConfig<typeof mumbaiUsdtTokenABI, "transfer">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mumbaiUsdtTokenABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareMumbaiUsdtTokenTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mumbaiUsdtTokenABI, "transferFrom">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: mumbaiUsdtTokenABI,
    address: mumbaiUsdtTokenAddress,
    functionName: "transferFrom",
    ...config,
  } as UsePrepareContractWriteConfig<typeof mumbaiUsdtTokenABI, "transferFrom">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mumbaiUsdtTokenABI}__.
 */
export function useMumbaiUsdtTokenEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof mumbaiUsdtTokenABI, TEventName>,
    "abi" | "address"
  > = {} as any
) {
  return useContractEvent({
    abi: mumbaiUsdtTokenABI,
    address: mumbaiUsdtTokenAddress,
    ...config,
  } as UseContractEventConfig<typeof mumbaiUsdtTokenABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mumbaiUsdtTokenABI}__ and `eventName` set to `"Approval"`.
 */
export function useMumbaiUsdtTokenApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof mumbaiUsdtTokenABI, "Approval">,
    "abi" | "address" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: mumbaiUsdtTokenABI,
    address: mumbaiUsdtTokenAddress,
    eventName: "Approval",
    ...config,
  } as UseContractEventConfig<typeof mumbaiUsdtTokenABI, "Approval">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mumbaiUsdtTokenABI}__ and `eventName` set to `"Initialized"`.
 */
export function useMumbaiUsdtTokenInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof mumbaiUsdtTokenABI, "Initialized">,
    "abi" | "address" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: mumbaiUsdtTokenABI,
    address: mumbaiUsdtTokenAddress,
    eventName: "Initialized",
    ...config,
  } as UseContractEventConfig<typeof mumbaiUsdtTokenABI, "Initialized">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mumbaiUsdtTokenABI}__ and `eventName` set to `"Transfer"`.
 */
export function useMumbaiUsdtTokenTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof mumbaiUsdtTokenABI, "Transfer">,
    "abi" | "address" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: mumbaiUsdtTokenABI,
    address: mumbaiUsdtTokenAddress,
    eventName: "Transfer",
    ...config,
  } as UseContractEventConfig<typeof mumbaiUsdtTokenABI, "Transfer">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mumbaiUsdcTokenABI}__.
 */
export function useMumbaiUsdcTokenRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof mumbaiUsdcTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<
      typeof mumbaiUsdcTokenABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "address"
  > = {} as any
) {
  return useContractRead({
    abi: mumbaiUsdcTokenABI,
    address: mumbaiUsdcTokenAddress,
    ...config,
  } as UseContractReadConfig<typeof mumbaiUsdcTokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mumbaiUsdcTokenABI}__ and `functionName` set to `"allowance"`.
 */
export function useMumbaiUsdcTokenAllowance<
  TFunctionName extends "allowance",
  TSelectData = ReadContractResult<typeof mumbaiUsdcTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<
      typeof mumbaiUsdcTokenABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: mumbaiUsdcTokenABI,
    address: mumbaiUsdcTokenAddress,
    functionName: "allowance",
    ...config,
  } as UseContractReadConfig<typeof mumbaiUsdcTokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mumbaiUsdcTokenABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useMumbaiUsdcTokenBalanceOf<
  TFunctionName extends "balanceOf",
  TSelectData = ReadContractResult<typeof mumbaiUsdcTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<
      typeof mumbaiUsdcTokenABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: mumbaiUsdcTokenABI,
    address: mumbaiUsdcTokenAddress,
    functionName: "balanceOf",
    ...config,
  } as UseContractReadConfig<typeof mumbaiUsdcTokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mumbaiUsdcTokenABI}__ and `functionName` set to `"decimals"`.
 */
export function useMumbaiUsdcTokenDecimals<
  TFunctionName extends "decimals",
  TSelectData = ReadContractResult<typeof mumbaiUsdcTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<
      typeof mumbaiUsdcTokenABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: mumbaiUsdcTokenABI,
    address: mumbaiUsdcTokenAddress,
    functionName: "decimals",
    ...config,
  } as UseContractReadConfig<typeof mumbaiUsdcTokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mumbaiUsdcTokenABI}__ and `functionName` set to `"name"`.
 */
export function useMumbaiUsdcTokenName<
  TFunctionName extends "name",
  TSelectData = ReadContractResult<typeof mumbaiUsdcTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<
      typeof mumbaiUsdcTokenABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: mumbaiUsdcTokenABI,
    address: mumbaiUsdcTokenAddress,
    functionName: "name",
    ...config,
  } as UseContractReadConfig<typeof mumbaiUsdcTokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mumbaiUsdcTokenABI}__ and `functionName` set to `"symbol"`.
 */
export function useMumbaiUsdcTokenSymbol<
  TFunctionName extends "symbol",
  TSelectData = ReadContractResult<typeof mumbaiUsdcTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<
      typeof mumbaiUsdcTokenABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: mumbaiUsdcTokenABI,
    address: mumbaiUsdcTokenAddress,
    functionName: "symbol",
    ...config,
  } as UseContractReadConfig<typeof mumbaiUsdcTokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mumbaiUsdcTokenABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useMumbaiUsdcTokenTotalSupply<
  TFunctionName extends "totalSupply",
  TSelectData = ReadContractResult<typeof mumbaiUsdcTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<
      typeof mumbaiUsdcTokenABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: mumbaiUsdcTokenABI,
    address: mumbaiUsdcTokenAddress,
    functionName: "totalSupply",
    ...config,
  } as UseContractReadConfig<typeof mumbaiUsdcTokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mumbaiUsdcTokenABI}__.
 */
export function useMumbaiUsdcTokenWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof mumbaiUsdcTokenABI,
          string
        >["request"]["abi"],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof mumbaiUsdcTokenABI,
        TFunctionName,
        TMode
      > & {
        abi?: never;
      } = {} as any
) {
  return useContractWrite<typeof mumbaiUsdcTokenABI, TFunctionName, TMode>({
    abi: mumbaiUsdcTokenABI,
    address: mumbaiUsdcTokenAddress,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mumbaiUsdcTokenABI}__ and `functionName` set to `"approve"`.
 */
export function useMumbaiUsdcTokenApprove<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof mumbaiUsdcTokenABI,
          "approve"
        >["request"]["abi"],
        "approve",
        TMode
      > & { functionName?: "approve" }
    : UseContractWriteConfig<typeof mumbaiUsdcTokenABI, "approve", TMode> & {
        abi?: never;
        functionName?: "approve";
      } = {} as any
) {
  return useContractWrite<typeof mumbaiUsdcTokenABI, "approve", TMode>({
    abi: mumbaiUsdcTokenABI,
    address: mumbaiUsdcTokenAddress,
    functionName: "approve",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mumbaiUsdcTokenABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function useMumbaiUsdcTokenDecreaseAllowance<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof mumbaiUsdcTokenABI,
          "decreaseAllowance"
        >["request"]["abi"],
        "decreaseAllowance",
        TMode
      > & { functionName?: "decreaseAllowance" }
    : UseContractWriteConfig<
        typeof mumbaiUsdcTokenABI,
        "decreaseAllowance",
        TMode
      > & {
        abi?: never;
        functionName?: "decreaseAllowance";
      } = {} as any
) {
  return useContractWrite<
    typeof mumbaiUsdcTokenABI,
    "decreaseAllowance",
    TMode
  >({
    abi: mumbaiUsdcTokenABI,
    address: mumbaiUsdcTokenAddress,
    functionName: "decreaseAllowance",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mumbaiUsdcTokenABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function useMumbaiUsdcTokenIncreaseAllowance<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof mumbaiUsdcTokenABI,
          "increaseAllowance"
        >["request"]["abi"],
        "increaseAllowance",
        TMode
      > & { functionName?: "increaseAllowance" }
    : UseContractWriteConfig<
        typeof mumbaiUsdcTokenABI,
        "increaseAllowance",
        TMode
      > & {
        abi?: never;
        functionName?: "increaseAllowance";
      } = {} as any
) {
  return useContractWrite<
    typeof mumbaiUsdcTokenABI,
    "increaseAllowance",
    TMode
  >({
    abi: mumbaiUsdcTokenABI,
    address: mumbaiUsdcTokenAddress,
    functionName: "increaseAllowance",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mumbaiUsdcTokenABI}__ and `functionName` set to `"initialize"`.
 */
export function useMumbaiUsdcTokenInitialize<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof mumbaiUsdcTokenABI,
          "initialize"
        >["request"]["abi"],
        "initialize",
        TMode
      > & { functionName?: "initialize" }
    : UseContractWriteConfig<typeof mumbaiUsdcTokenABI, "initialize", TMode> & {
        abi?: never;
        functionName?: "initialize";
      } = {} as any
) {
  return useContractWrite<typeof mumbaiUsdcTokenABI, "initialize", TMode>({
    abi: mumbaiUsdcTokenABI,
    address: mumbaiUsdcTokenAddress,
    functionName: "initialize",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mumbaiUsdcTokenABI}__ and `functionName` set to `"mint"`.
 */
export function useMumbaiUsdcTokenMint<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof mumbaiUsdcTokenABI,
          "mint"
        >["request"]["abi"],
        "mint",
        TMode
      > & { functionName?: "mint" }
    : UseContractWriteConfig<typeof mumbaiUsdcTokenABI, "mint", TMode> & {
        abi?: never;
        functionName?: "mint";
      } = {} as any
) {
  return useContractWrite<typeof mumbaiUsdcTokenABI, "mint", TMode>({
    abi: mumbaiUsdcTokenABI,
    address: mumbaiUsdcTokenAddress,
    functionName: "mint",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mumbaiUsdcTokenABI}__ and `functionName` set to `"transfer"`.
 */
export function useMumbaiUsdcTokenTransfer<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof mumbaiUsdcTokenABI,
          "transfer"
        >["request"]["abi"],
        "transfer",
        TMode
      > & { functionName?: "transfer" }
    : UseContractWriteConfig<typeof mumbaiUsdcTokenABI, "transfer", TMode> & {
        abi?: never;
        functionName?: "transfer";
      } = {} as any
) {
  return useContractWrite<typeof mumbaiUsdcTokenABI, "transfer", TMode>({
    abi: mumbaiUsdcTokenABI,
    address: mumbaiUsdcTokenAddress,
    functionName: "transfer",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mumbaiUsdcTokenABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useMumbaiUsdcTokenTransferFrom<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof mumbaiUsdcTokenABI,
          "transferFrom"
        >["request"]["abi"],
        "transferFrom",
        TMode
      > & { functionName?: "transferFrom" }
    : UseContractWriteConfig<
        typeof mumbaiUsdcTokenABI,
        "transferFrom",
        TMode
      > & {
        abi?: never;
        functionName?: "transferFrom";
      } = {} as any
) {
  return useContractWrite<typeof mumbaiUsdcTokenABI, "transferFrom", TMode>({
    abi: mumbaiUsdcTokenABI,
    address: mumbaiUsdcTokenAddress,
    functionName: "transferFrom",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mumbaiUsdcTokenABI}__.
 */
export function usePrepareMumbaiUsdcTokenWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mumbaiUsdcTokenABI, TFunctionName>,
    "abi" | "address"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: mumbaiUsdcTokenABI,
    address: mumbaiUsdcTokenAddress,
    ...config,
  } as UsePrepareContractWriteConfig<typeof mumbaiUsdcTokenABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mumbaiUsdcTokenABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareMumbaiUsdcTokenApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mumbaiUsdcTokenABI, "approve">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: mumbaiUsdcTokenABI,
    address: mumbaiUsdcTokenAddress,
    functionName: "approve",
    ...config,
  } as UsePrepareContractWriteConfig<typeof mumbaiUsdcTokenABI, "approve">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mumbaiUsdcTokenABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function usePrepareMumbaiUsdcTokenDecreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof mumbaiUsdcTokenABI,
      "decreaseAllowance"
    >,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: mumbaiUsdcTokenABI,
    address: mumbaiUsdcTokenAddress,
    functionName: "decreaseAllowance",
    ...config,
  } as UsePrepareContractWriteConfig<typeof mumbaiUsdcTokenABI, "decreaseAllowance">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mumbaiUsdcTokenABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function usePrepareMumbaiUsdcTokenIncreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof mumbaiUsdcTokenABI,
      "increaseAllowance"
    >,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: mumbaiUsdcTokenABI,
    address: mumbaiUsdcTokenAddress,
    functionName: "increaseAllowance",
    ...config,
  } as UsePrepareContractWriteConfig<typeof mumbaiUsdcTokenABI, "increaseAllowance">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mumbaiUsdcTokenABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareMumbaiUsdcTokenInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mumbaiUsdcTokenABI, "initialize">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: mumbaiUsdcTokenABI,
    address: mumbaiUsdcTokenAddress,
    functionName: "initialize",
    ...config,
  } as UsePrepareContractWriteConfig<typeof mumbaiUsdcTokenABI, "initialize">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mumbaiUsdcTokenABI}__ and `functionName` set to `"mint"`.
 */
export function usePrepareMumbaiUsdcTokenMint(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mumbaiUsdcTokenABI, "mint">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: mumbaiUsdcTokenABI,
    address: mumbaiUsdcTokenAddress,
    functionName: "mint",
    ...config,
  } as UsePrepareContractWriteConfig<typeof mumbaiUsdcTokenABI, "mint">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mumbaiUsdcTokenABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareMumbaiUsdcTokenTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mumbaiUsdcTokenABI, "transfer">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: mumbaiUsdcTokenABI,
    address: mumbaiUsdcTokenAddress,
    functionName: "transfer",
    ...config,
  } as UsePrepareContractWriteConfig<typeof mumbaiUsdcTokenABI, "transfer">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mumbaiUsdcTokenABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareMumbaiUsdcTokenTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mumbaiUsdcTokenABI, "transferFrom">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: mumbaiUsdcTokenABI,
    address: mumbaiUsdcTokenAddress,
    functionName: "transferFrom",
    ...config,
  } as UsePrepareContractWriteConfig<typeof mumbaiUsdcTokenABI, "transferFrom">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mumbaiUsdcTokenABI}__.
 */
export function useMumbaiUsdcTokenEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof mumbaiUsdcTokenABI, TEventName>,
    "abi" | "address"
  > = {} as any
) {
  return useContractEvent({
    abi: mumbaiUsdcTokenABI,
    address: mumbaiUsdcTokenAddress,
    ...config,
  } as UseContractEventConfig<typeof mumbaiUsdcTokenABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mumbaiUsdcTokenABI}__ and `eventName` set to `"Approval"`.
 */
export function useMumbaiUsdcTokenApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof mumbaiUsdcTokenABI, "Approval">,
    "abi" | "address" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: mumbaiUsdcTokenABI,
    address: mumbaiUsdcTokenAddress,
    eventName: "Approval",
    ...config,
  } as UseContractEventConfig<typeof mumbaiUsdcTokenABI, "Approval">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mumbaiUsdcTokenABI}__ and `eventName` set to `"Initialized"`.
 */
export function useMumbaiUsdcTokenInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof mumbaiUsdcTokenABI, "Initialized">,
    "abi" | "address" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: mumbaiUsdcTokenABI,
    address: mumbaiUsdcTokenAddress,
    eventName: "Initialized",
    ...config,
  } as UseContractEventConfig<typeof mumbaiUsdcTokenABI, "Initialized">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mumbaiUsdcTokenABI}__ and `eventName` set to `"Transfer"`.
 */
export function useMumbaiUsdcTokenTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof mumbaiUsdcTokenABI, "Transfer">,
    "abi" | "address" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: mumbaiUsdcTokenABI,
    address: mumbaiUsdcTokenAddress,
    eventName: "Transfer",
    ...config,
  } as UseContractEventConfig<typeof mumbaiUsdcTokenABI, "Transfer">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mumbaiWethTokenABI}__.
 */
export function useMumbaiWethTokenRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof mumbaiWethTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<
      typeof mumbaiWethTokenABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "address"
  > = {} as any
) {
  return useContractRead({
    abi: mumbaiWethTokenABI,
    address: mumbaiWethTokenAddress,
    ...config,
  } as UseContractReadConfig<typeof mumbaiWethTokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mumbaiWethTokenABI}__ and `functionName` set to `"allowance"`.
 */
export function useMumbaiWethTokenAllowance<
  TFunctionName extends "allowance",
  TSelectData = ReadContractResult<typeof mumbaiWethTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<
      typeof mumbaiWethTokenABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: mumbaiWethTokenABI,
    address: mumbaiWethTokenAddress,
    functionName: "allowance",
    ...config,
  } as UseContractReadConfig<typeof mumbaiWethTokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mumbaiWethTokenABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useMumbaiWethTokenBalanceOf<
  TFunctionName extends "balanceOf",
  TSelectData = ReadContractResult<typeof mumbaiWethTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<
      typeof mumbaiWethTokenABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: mumbaiWethTokenABI,
    address: mumbaiWethTokenAddress,
    functionName: "balanceOf",
    ...config,
  } as UseContractReadConfig<typeof mumbaiWethTokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mumbaiWethTokenABI}__ and `functionName` set to `"decimals"`.
 */
export function useMumbaiWethTokenDecimals<
  TFunctionName extends "decimals",
  TSelectData = ReadContractResult<typeof mumbaiWethTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<
      typeof mumbaiWethTokenABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: mumbaiWethTokenABI,
    address: mumbaiWethTokenAddress,
    functionName: "decimals",
    ...config,
  } as UseContractReadConfig<typeof mumbaiWethTokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mumbaiWethTokenABI}__ and `functionName` set to `"name"`.
 */
export function useMumbaiWethTokenName<
  TFunctionName extends "name",
  TSelectData = ReadContractResult<typeof mumbaiWethTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<
      typeof mumbaiWethTokenABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: mumbaiWethTokenABI,
    address: mumbaiWethTokenAddress,
    functionName: "name",
    ...config,
  } as UseContractReadConfig<typeof mumbaiWethTokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mumbaiWethTokenABI}__ and `functionName` set to `"symbol"`.
 */
export function useMumbaiWethTokenSymbol<
  TFunctionName extends "symbol",
  TSelectData = ReadContractResult<typeof mumbaiWethTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<
      typeof mumbaiWethTokenABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: mumbaiWethTokenABI,
    address: mumbaiWethTokenAddress,
    functionName: "symbol",
    ...config,
  } as UseContractReadConfig<typeof mumbaiWethTokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mumbaiWethTokenABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useMumbaiWethTokenTotalSupply<
  TFunctionName extends "totalSupply",
  TSelectData = ReadContractResult<typeof mumbaiWethTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<
      typeof mumbaiWethTokenABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: mumbaiWethTokenABI,
    address: mumbaiWethTokenAddress,
    functionName: "totalSupply",
    ...config,
  } as UseContractReadConfig<typeof mumbaiWethTokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mumbaiWethTokenABI}__.
 */
export function useMumbaiWethTokenWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof mumbaiWethTokenABI,
          string
        >["request"]["abi"],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof mumbaiWethTokenABI,
        TFunctionName,
        TMode
      > & {
        abi?: never;
      } = {} as any
) {
  return useContractWrite<typeof mumbaiWethTokenABI, TFunctionName, TMode>({
    abi: mumbaiWethTokenABI,
    address: mumbaiWethTokenAddress,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mumbaiWethTokenABI}__ and `functionName` set to `"approve"`.
 */
export function useMumbaiWethTokenApprove<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof mumbaiWethTokenABI,
          "approve"
        >["request"]["abi"],
        "approve",
        TMode
      > & { functionName?: "approve" }
    : UseContractWriteConfig<typeof mumbaiWethTokenABI, "approve", TMode> & {
        abi?: never;
        functionName?: "approve";
      } = {} as any
) {
  return useContractWrite<typeof mumbaiWethTokenABI, "approve", TMode>({
    abi: mumbaiWethTokenABI,
    address: mumbaiWethTokenAddress,
    functionName: "approve",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mumbaiWethTokenABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function useMumbaiWethTokenDecreaseAllowance<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof mumbaiWethTokenABI,
          "decreaseAllowance"
        >["request"]["abi"],
        "decreaseAllowance",
        TMode
      > & { functionName?: "decreaseAllowance" }
    : UseContractWriteConfig<
        typeof mumbaiWethTokenABI,
        "decreaseAllowance",
        TMode
      > & {
        abi?: never;
        functionName?: "decreaseAllowance";
      } = {} as any
) {
  return useContractWrite<
    typeof mumbaiWethTokenABI,
    "decreaseAllowance",
    TMode
  >({
    abi: mumbaiWethTokenABI,
    address: mumbaiWethTokenAddress,
    functionName: "decreaseAllowance",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mumbaiWethTokenABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function useMumbaiWethTokenIncreaseAllowance<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof mumbaiWethTokenABI,
          "increaseAllowance"
        >["request"]["abi"],
        "increaseAllowance",
        TMode
      > & { functionName?: "increaseAllowance" }
    : UseContractWriteConfig<
        typeof mumbaiWethTokenABI,
        "increaseAllowance",
        TMode
      > & {
        abi?: never;
        functionName?: "increaseAllowance";
      } = {} as any
) {
  return useContractWrite<
    typeof mumbaiWethTokenABI,
    "increaseAllowance",
    TMode
  >({
    abi: mumbaiWethTokenABI,
    address: mumbaiWethTokenAddress,
    functionName: "increaseAllowance",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mumbaiWethTokenABI}__ and `functionName` set to `"initialize"`.
 */
export function useMumbaiWethTokenInitialize<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof mumbaiWethTokenABI,
          "initialize"
        >["request"]["abi"],
        "initialize",
        TMode
      > & { functionName?: "initialize" }
    : UseContractWriteConfig<typeof mumbaiWethTokenABI, "initialize", TMode> & {
        abi?: never;
        functionName?: "initialize";
      } = {} as any
) {
  return useContractWrite<typeof mumbaiWethTokenABI, "initialize", TMode>({
    abi: mumbaiWethTokenABI,
    address: mumbaiWethTokenAddress,
    functionName: "initialize",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mumbaiWethTokenABI}__ and `functionName` set to `"mint"`.
 */
export function useMumbaiWethTokenMint<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof mumbaiWethTokenABI,
          "mint"
        >["request"]["abi"],
        "mint",
        TMode
      > & { functionName?: "mint" }
    : UseContractWriteConfig<typeof mumbaiWethTokenABI, "mint", TMode> & {
        abi?: never;
        functionName?: "mint";
      } = {} as any
) {
  return useContractWrite<typeof mumbaiWethTokenABI, "mint", TMode>({
    abi: mumbaiWethTokenABI,
    address: mumbaiWethTokenAddress,
    functionName: "mint",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mumbaiWethTokenABI}__ and `functionName` set to `"transfer"`.
 */
export function useMumbaiWethTokenTransfer<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof mumbaiWethTokenABI,
          "transfer"
        >["request"]["abi"],
        "transfer",
        TMode
      > & { functionName?: "transfer" }
    : UseContractWriteConfig<typeof mumbaiWethTokenABI, "transfer", TMode> & {
        abi?: never;
        functionName?: "transfer";
      } = {} as any
) {
  return useContractWrite<typeof mumbaiWethTokenABI, "transfer", TMode>({
    abi: mumbaiWethTokenABI,
    address: mumbaiWethTokenAddress,
    functionName: "transfer",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mumbaiWethTokenABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useMumbaiWethTokenTransferFrom<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof mumbaiWethTokenABI,
          "transferFrom"
        >["request"]["abi"],
        "transferFrom",
        TMode
      > & { functionName?: "transferFrom" }
    : UseContractWriteConfig<
        typeof mumbaiWethTokenABI,
        "transferFrom",
        TMode
      > & {
        abi?: never;
        functionName?: "transferFrom";
      } = {} as any
) {
  return useContractWrite<typeof mumbaiWethTokenABI, "transferFrom", TMode>({
    abi: mumbaiWethTokenABI,
    address: mumbaiWethTokenAddress,
    functionName: "transferFrom",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mumbaiWethTokenABI}__.
 */
export function usePrepareMumbaiWethTokenWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mumbaiWethTokenABI, TFunctionName>,
    "abi" | "address"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: mumbaiWethTokenABI,
    address: mumbaiWethTokenAddress,
    ...config,
  } as UsePrepareContractWriteConfig<typeof mumbaiWethTokenABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mumbaiWethTokenABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareMumbaiWethTokenApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mumbaiWethTokenABI, "approve">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: mumbaiWethTokenABI,
    address: mumbaiWethTokenAddress,
    functionName: "approve",
    ...config,
  } as UsePrepareContractWriteConfig<typeof mumbaiWethTokenABI, "approve">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mumbaiWethTokenABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function usePrepareMumbaiWethTokenDecreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof mumbaiWethTokenABI,
      "decreaseAllowance"
    >,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: mumbaiWethTokenABI,
    address: mumbaiWethTokenAddress,
    functionName: "decreaseAllowance",
    ...config,
  } as UsePrepareContractWriteConfig<typeof mumbaiWethTokenABI, "decreaseAllowance">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mumbaiWethTokenABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function usePrepareMumbaiWethTokenIncreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof mumbaiWethTokenABI,
      "increaseAllowance"
    >,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: mumbaiWethTokenABI,
    address: mumbaiWethTokenAddress,
    functionName: "increaseAllowance",
    ...config,
  } as UsePrepareContractWriteConfig<typeof mumbaiWethTokenABI, "increaseAllowance">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mumbaiWethTokenABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareMumbaiWethTokenInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mumbaiWethTokenABI, "initialize">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: mumbaiWethTokenABI,
    address: mumbaiWethTokenAddress,
    functionName: "initialize",
    ...config,
  } as UsePrepareContractWriteConfig<typeof mumbaiWethTokenABI, "initialize">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mumbaiWethTokenABI}__ and `functionName` set to `"mint"`.
 */
export function usePrepareMumbaiWethTokenMint(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mumbaiWethTokenABI, "mint">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: mumbaiWethTokenABI,
    address: mumbaiWethTokenAddress,
    functionName: "mint",
    ...config,
  } as UsePrepareContractWriteConfig<typeof mumbaiWethTokenABI, "mint">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mumbaiWethTokenABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareMumbaiWethTokenTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mumbaiWethTokenABI, "transfer">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: mumbaiWethTokenABI,
    address: mumbaiWethTokenAddress,
    functionName: "transfer",
    ...config,
  } as UsePrepareContractWriteConfig<typeof mumbaiWethTokenABI, "transfer">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mumbaiWethTokenABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareMumbaiWethTokenTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mumbaiWethTokenABI, "transferFrom">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: mumbaiWethTokenABI,
    address: mumbaiWethTokenAddress,
    functionName: "transferFrom",
    ...config,
  } as UsePrepareContractWriteConfig<typeof mumbaiWethTokenABI, "transferFrom">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mumbaiWethTokenABI}__.
 */
export function useMumbaiWethTokenEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof mumbaiWethTokenABI, TEventName>,
    "abi" | "address"
  > = {} as any
) {
  return useContractEvent({
    abi: mumbaiWethTokenABI,
    address: mumbaiWethTokenAddress,
    ...config,
  } as UseContractEventConfig<typeof mumbaiWethTokenABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mumbaiWethTokenABI}__ and `eventName` set to `"Approval"`.
 */
export function useMumbaiWethTokenApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof mumbaiWethTokenABI, "Approval">,
    "abi" | "address" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: mumbaiWethTokenABI,
    address: mumbaiWethTokenAddress,
    eventName: "Approval",
    ...config,
  } as UseContractEventConfig<typeof mumbaiWethTokenABI, "Approval">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mumbaiWethTokenABI}__ and `eventName` set to `"Initialized"`.
 */
export function useMumbaiWethTokenInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof mumbaiWethTokenABI, "Initialized">,
    "abi" | "address" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: mumbaiWethTokenABI,
    address: mumbaiWethTokenAddress,
    eventName: "Initialized",
    ...config,
  } as UseContractEventConfig<typeof mumbaiWethTokenABI, "Initialized">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mumbaiWethTokenABI}__ and `eventName` set to `"Transfer"`.
 */
export function useMumbaiWethTokenTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof mumbaiWethTokenABI, "Transfer">,
    "abi" | "address" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: mumbaiWethTokenABI,
    address: mumbaiWethTokenAddress,
    eventName: "Transfer",
    ...config,
  } as UseContractEventConfig<typeof mumbaiWethTokenABI, "Transfer">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mumbaiMaticTokenABI}__.
 */
export function useMumbaiMaticTokenRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof mumbaiMaticTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<
      typeof mumbaiMaticTokenABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "address"
  > = {} as any
) {
  return useContractRead({
    abi: mumbaiMaticTokenABI,
    address: mumbaiMaticTokenAddress,
    ...config,
  } as UseContractReadConfig<typeof mumbaiMaticTokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mumbaiMaticTokenABI}__ and `functionName` set to `"allowance"`.
 */
export function useMumbaiMaticTokenAllowance<
  TFunctionName extends "allowance",
  TSelectData = ReadContractResult<typeof mumbaiMaticTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<
      typeof mumbaiMaticTokenABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: mumbaiMaticTokenABI,
    address: mumbaiMaticTokenAddress,
    functionName: "allowance",
    ...config,
  } as UseContractReadConfig<typeof mumbaiMaticTokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mumbaiMaticTokenABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useMumbaiMaticTokenBalanceOf<
  TFunctionName extends "balanceOf",
  TSelectData = ReadContractResult<typeof mumbaiMaticTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<
      typeof mumbaiMaticTokenABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: mumbaiMaticTokenABI,
    address: mumbaiMaticTokenAddress,
    functionName: "balanceOf",
    ...config,
  } as UseContractReadConfig<typeof mumbaiMaticTokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mumbaiMaticTokenABI}__ and `functionName` set to `"decimals"`.
 */
export function useMumbaiMaticTokenDecimals<
  TFunctionName extends "decimals",
  TSelectData = ReadContractResult<typeof mumbaiMaticTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<
      typeof mumbaiMaticTokenABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: mumbaiMaticTokenABI,
    address: mumbaiMaticTokenAddress,
    functionName: "decimals",
    ...config,
  } as UseContractReadConfig<typeof mumbaiMaticTokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mumbaiMaticTokenABI}__ and `functionName` set to `"name"`.
 */
export function useMumbaiMaticTokenName<
  TFunctionName extends "name",
  TSelectData = ReadContractResult<typeof mumbaiMaticTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<
      typeof mumbaiMaticTokenABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: mumbaiMaticTokenABI,
    address: mumbaiMaticTokenAddress,
    functionName: "name",
    ...config,
  } as UseContractReadConfig<typeof mumbaiMaticTokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mumbaiMaticTokenABI}__ and `functionName` set to `"symbol"`.
 */
export function useMumbaiMaticTokenSymbol<
  TFunctionName extends "symbol",
  TSelectData = ReadContractResult<typeof mumbaiMaticTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<
      typeof mumbaiMaticTokenABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: mumbaiMaticTokenABI,
    address: mumbaiMaticTokenAddress,
    functionName: "symbol",
    ...config,
  } as UseContractReadConfig<typeof mumbaiMaticTokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mumbaiMaticTokenABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useMumbaiMaticTokenTotalSupply<
  TFunctionName extends "totalSupply",
  TSelectData = ReadContractResult<typeof mumbaiMaticTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<
      typeof mumbaiMaticTokenABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: mumbaiMaticTokenABI,
    address: mumbaiMaticTokenAddress,
    functionName: "totalSupply",
    ...config,
  } as UseContractReadConfig<typeof mumbaiMaticTokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mumbaiMaticTokenABI}__.
 */
export function useMumbaiMaticTokenWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof mumbaiMaticTokenABI,
          string
        >["request"]["abi"],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof mumbaiMaticTokenABI,
        TFunctionName,
        TMode
      > & {
        abi?: never;
      } = {} as any
) {
  return useContractWrite<typeof mumbaiMaticTokenABI, TFunctionName, TMode>({
    abi: mumbaiMaticTokenABI,
    address: mumbaiMaticTokenAddress,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mumbaiMaticTokenABI}__ and `functionName` set to `"approve"`.
 */
export function useMumbaiMaticTokenApprove<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof mumbaiMaticTokenABI,
          "approve"
        >["request"]["abi"],
        "approve",
        TMode
      > & { functionName?: "approve" }
    : UseContractWriteConfig<typeof mumbaiMaticTokenABI, "approve", TMode> & {
        abi?: never;
        functionName?: "approve";
      } = {} as any
) {
  return useContractWrite<typeof mumbaiMaticTokenABI, "approve", TMode>({
    abi: mumbaiMaticTokenABI,
    address: mumbaiMaticTokenAddress,
    functionName: "approve",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mumbaiMaticTokenABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function useMumbaiMaticTokenDecreaseAllowance<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof mumbaiMaticTokenABI,
          "decreaseAllowance"
        >["request"]["abi"],
        "decreaseAllowance",
        TMode
      > & { functionName?: "decreaseAllowance" }
    : UseContractWriteConfig<
        typeof mumbaiMaticTokenABI,
        "decreaseAllowance",
        TMode
      > & {
        abi?: never;
        functionName?: "decreaseAllowance";
      } = {} as any
) {
  return useContractWrite<
    typeof mumbaiMaticTokenABI,
    "decreaseAllowance",
    TMode
  >({
    abi: mumbaiMaticTokenABI,
    address: mumbaiMaticTokenAddress,
    functionName: "decreaseAllowance",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mumbaiMaticTokenABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function useMumbaiMaticTokenIncreaseAllowance<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof mumbaiMaticTokenABI,
          "increaseAllowance"
        >["request"]["abi"],
        "increaseAllowance",
        TMode
      > & { functionName?: "increaseAllowance" }
    : UseContractWriteConfig<
        typeof mumbaiMaticTokenABI,
        "increaseAllowance",
        TMode
      > & {
        abi?: never;
        functionName?: "increaseAllowance";
      } = {} as any
) {
  return useContractWrite<
    typeof mumbaiMaticTokenABI,
    "increaseAllowance",
    TMode
  >({
    abi: mumbaiMaticTokenABI,
    address: mumbaiMaticTokenAddress,
    functionName: "increaseAllowance",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mumbaiMaticTokenABI}__ and `functionName` set to `"initialize"`.
 */
export function useMumbaiMaticTokenInitialize<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof mumbaiMaticTokenABI,
          "initialize"
        >["request"]["abi"],
        "initialize",
        TMode
      > & { functionName?: "initialize" }
    : UseContractWriteConfig<
        typeof mumbaiMaticTokenABI,
        "initialize",
        TMode
      > & {
        abi?: never;
        functionName?: "initialize";
      } = {} as any
) {
  return useContractWrite<typeof mumbaiMaticTokenABI, "initialize", TMode>({
    abi: mumbaiMaticTokenABI,
    address: mumbaiMaticTokenAddress,
    functionName: "initialize",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mumbaiMaticTokenABI}__ and `functionName` set to `"mint"`.
 */
export function useMumbaiMaticTokenMint<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof mumbaiMaticTokenABI,
          "mint"
        >["request"]["abi"],
        "mint",
        TMode
      > & { functionName?: "mint" }
    : UseContractWriteConfig<typeof mumbaiMaticTokenABI, "mint", TMode> & {
        abi?: never;
        functionName?: "mint";
      } = {} as any
) {
  return useContractWrite<typeof mumbaiMaticTokenABI, "mint", TMode>({
    abi: mumbaiMaticTokenABI,
    address: mumbaiMaticTokenAddress,
    functionName: "mint",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mumbaiMaticTokenABI}__ and `functionName` set to `"transfer"`.
 */
export function useMumbaiMaticTokenTransfer<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof mumbaiMaticTokenABI,
          "transfer"
        >["request"]["abi"],
        "transfer",
        TMode
      > & { functionName?: "transfer" }
    : UseContractWriteConfig<typeof mumbaiMaticTokenABI, "transfer", TMode> & {
        abi?: never;
        functionName?: "transfer";
      } = {} as any
) {
  return useContractWrite<typeof mumbaiMaticTokenABI, "transfer", TMode>({
    abi: mumbaiMaticTokenABI,
    address: mumbaiMaticTokenAddress,
    functionName: "transfer",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mumbaiMaticTokenABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useMumbaiMaticTokenTransferFrom<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof mumbaiMaticTokenABI,
          "transferFrom"
        >["request"]["abi"],
        "transferFrom",
        TMode
      > & { functionName?: "transferFrom" }
    : UseContractWriteConfig<
        typeof mumbaiMaticTokenABI,
        "transferFrom",
        TMode
      > & {
        abi?: never;
        functionName?: "transferFrom";
      } = {} as any
) {
  return useContractWrite<typeof mumbaiMaticTokenABI, "transferFrom", TMode>({
    abi: mumbaiMaticTokenABI,
    address: mumbaiMaticTokenAddress,
    functionName: "transferFrom",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mumbaiMaticTokenABI}__.
 */
export function usePrepareMumbaiMaticTokenWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mumbaiMaticTokenABI, TFunctionName>,
    "abi" | "address"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: mumbaiMaticTokenABI,
    address: mumbaiMaticTokenAddress,
    ...config,
  } as UsePrepareContractWriteConfig<typeof mumbaiMaticTokenABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mumbaiMaticTokenABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareMumbaiMaticTokenApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mumbaiMaticTokenABI, "approve">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: mumbaiMaticTokenABI,
    address: mumbaiMaticTokenAddress,
    functionName: "approve",
    ...config,
  } as UsePrepareContractWriteConfig<typeof mumbaiMaticTokenABI, "approve">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mumbaiMaticTokenABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function usePrepareMumbaiMaticTokenDecreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof mumbaiMaticTokenABI,
      "decreaseAllowance"
    >,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: mumbaiMaticTokenABI,
    address: mumbaiMaticTokenAddress,
    functionName: "decreaseAllowance",
    ...config,
  } as UsePrepareContractWriteConfig<typeof mumbaiMaticTokenABI, "decreaseAllowance">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mumbaiMaticTokenABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function usePrepareMumbaiMaticTokenIncreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof mumbaiMaticTokenABI,
      "increaseAllowance"
    >,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: mumbaiMaticTokenABI,
    address: mumbaiMaticTokenAddress,
    functionName: "increaseAllowance",
    ...config,
  } as UsePrepareContractWriteConfig<typeof mumbaiMaticTokenABI, "increaseAllowance">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mumbaiMaticTokenABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareMumbaiMaticTokenInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mumbaiMaticTokenABI, "initialize">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: mumbaiMaticTokenABI,
    address: mumbaiMaticTokenAddress,
    functionName: "initialize",
    ...config,
  } as UsePrepareContractWriteConfig<typeof mumbaiMaticTokenABI, "initialize">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mumbaiMaticTokenABI}__ and `functionName` set to `"mint"`.
 */
export function usePrepareMumbaiMaticTokenMint(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mumbaiMaticTokenABI, "mint">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: mumbaiMaticTokenABI,
    address: mumbaiMaticTokenAddress,
    functionName: "mint",
    ...config,
  } as UsePrepareContractWriteConfig<typeof mumbaiMaticTokenABI, "mint">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mumbaiMaticTokenABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareMumbaiMaticTokenTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mumbaiMaticTokenABI, "transfer">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: mumbaiMaticTokenABI,
    address: mumbaiMaticTokenAddress,
    functionName: "transfer",
    ...config,
  } as UsePrepareContractWriteConfig<typeof mumbaiMaticTokenABI, "transfer">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mumbaiMaticTokenABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareMumbaiMaticTokenTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mumbaiMaticTokenABI, "transferFrom">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: mumbaiMaticTokenABI,
    address: mumbaiMaticTokenAddress,
    functionName: "transferFrom",
    ...config,
  } as UsePrepareContractWriteConfig<typeof mumbaiMaticTokenABI, "transferFrom">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mumbaiMaticTokenABI}__.
 */
export function useMumbaiMaticTokenEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof mumbaiMaticTokenABI, TEventName>,
    "abi" | "address"
  > = {} as any
) {
  return useContractEvent({
    abi: mumbaiMaticTokenABI,
    address: mumbaiMaticTokenAddress,
    ...config,
  } as UseContractEventConfig<typeof mumbaiMaticTokenABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mumbaiMaticTokenABI}__ and `eventName` set to `"Approval"`.
 */
export function useMumbaiMaticTokenApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof mumbaiMaticTokenABI, "Approval">,
    "abi" | "address" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: mumbaiMaticTokenABI,
    address: mumbaiMaticTokenAddress,
    eventName: "Approval",
    ...config,
  } as UseContractEventConfig<typeof mumbaiMaticTokenABI, "Approval">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mumbaiMaticTokenABI}__ and `eventName` set to `"Initialized"`.
 */
export function useMumbaiMaticTokenInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof mumbaiMaticTokenABI, "Initialized">,
    "abi" | "address" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: mumbaiMaticTokenABI,
    address: mumbaiMaticTokenAddress,
    eventName: "Initialized",
    ...config,
  } as UseContractEventConfig<typeof mumbaiMaticTokenABI, "Initialized">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mumbaiMaticTokenABI}__ and `eventName` set to `"Transfer"`.
 */
export function useMumbaiMaticTokenTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof mumbaiMaticTokenABI, "Transfer">,
    "abi" | "address" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: mumbaiMaticTokenABI,
    address: mumbaiMaticTokenAddress,
    eventName: "Transfer",
    ...config,
  } as UseContractEventConfig<typeof mumbaiMaticTokenABI, "Transfer">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mumbaiUsdtMaticLpABI}__.
 */
export function useMumbaiUsdtMaticLpRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof mumbaiUsdtMaticLpABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<
      typeof mumbaiUsdtMaticLpABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "address"
  > = {} as any
) {
  return useContractRead({
    abi: mumbaiUsdtMaticLpABI,
    address: mumbaiUsdtMaticLpAddress,
    ...config,
  } as UseContractReadConfig<typeof mumbaiUsdtMaticLpABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mumbaiUsdtMaticLpABI}__ and `functionName` set to `"DOMAIN_SEPARATOR"`.
 */
export function useMumbaiUsdtMaticLpDomainSeparator<
  TFunctionName extends "DOMAIN_SEPARATOR",
  TSelectData = ReadContractResult<typeof mumbaiUsdtMaticLpABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<
      typeof mumbaiUsdtMaticLpABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: mumbaiUsdtMaticLpABI,
    address: mumbaiUsdtMaticLpAddress,
    functionName: "DOMAIN_SEPARATOR",
    ...config,
  } as UseContractReadConfig<typeof mumbaiUsdtMaticLpABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mumbaiUsdtMaticLpABI}__ and `functionName` set to `"MINIMUM_LIQUIDITY"`.
 */
export function useMumbaiUsdtMaticLpMinimumLiquidity<
  TFunctionName extends "MINIMUM_LIQUIDITY",
  TSelectData = ReadContractResult<typeof mumbaiUsdtMaticLpABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<
      typeof mumbaiUsdtMaticLpABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: mumbaiUsdtMaticLpABI,
    address: mumbaiUsdtMaticLpAddress,
    functionName: "MINIMUM_LIQUIDITY",
    ...config,
  } as UseContractReadConfig<typeof mumbaiUsdtMaticLpABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mumbaiUsdtMaticLpABI}__ and `functionName` set to `"PERMIT_TYPEHASH"`.
 */
export function useMumbaiUsdtMaticLpPermitTypehash<
  TFunctionName extends "PERMIT_TYPEHASH",
  TSelectData = ReadContractResult<typeof mumbaiUsdtMaticLpABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<
      typeof mumbaiUsdtMaticLpABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: mumbaiUsdtMaticLpABI,
    address: mumbaiUsdtMaticLpAddress,
    functionName: "PERMIT_TYPEHASH",
    ...config,
  } as UseContractReadConfig<typeof mumbaiUsdtMaticLpABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mumbaiUsdtMaticLpABI}__ and `functionName` set to `"allowance"`.
 */
export function useMumbaiUsdtMaticLpAllowance<
  TFunctionName extends "allowance",
  TSelectData = ReadContractResult<typeof mumbaiUsdtMaticLpABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<
      typeof mumbaiUsdtMaticLpABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: mumbaiUsdtMaticLpABI,
    address: mumbaiUsdtMaticLpAddress,
    functionName: "allowance",
    ...config,
  } as UseContractReadConfig<typeof mumbaiUsdtMaticLpABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mumbaiUsdtMaticLpABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useMumbaiUsdtMaticLpBalanceOf<
  TFunctionName extends "balanceOf",
  TSelectData = ReadContractResult<typeof mumbaiUsdtMaticLpABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<
      typeof mumbaiUsdtMaticLpABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: mumbaiUsdtMaticLpABI,
    address: mumbaiUsdtMaticLpAddress,
    functionName: "balanceOf",
    ...config,
  } as UseContractReadConfig<typeof mumbaiUsdtMaticLpABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mumbaiUsdtMaticLpABI}__ and `functionName` set to `"decimals"`.
 */
export function useMumbaiUsdtMaticLpDecimals<
  TFunctionName extends "decimals",
  TSelectData = ReadContractResult<typeof mumbaiUsdtMaticLpABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<
      typeof mumbaiUsdtMaticLpABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: mumbaiUsdtMaticLpABI,
    address: mumbaiUsdtMaticLpAddress,
    functionName: "decimals",
    ...config,
  } as UseContractReadConfig<typeof mumbaiUsdtMaticLpABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mumbaiUsdtMaticLpABI}__ and `functionName` set to `"factory"`.
 */
export function useMumbaiUsdtMaticLpFactory<
  TFunctionName extends "factory",
  TSelectData = ReadContractResult<typeof mumbaiUsdtMaticLpABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<
      typeof mumbaiUsdtMaticLpABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: mumbaiUsdtMaticLpABI,
    address: mumbaiUsdtMaticLpAddress,
    functionName: "factory",
    ...config,
  } as UseContractReadConfig<typeof mumbaiUsdtMaticLpABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mumbaiUsdtMaticLpABI}__ and `functionName` set to `"getReserves"`.
 */
export function useMumbaiUsdtMaticLpGetReserves<
  TFunctionName extends "getReserves",
  TSelectData = ReadContractResult<typeof mumbaiUsdtMaticLpABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<
      typeof mumbaiUsdtMaticLpABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: mumbaiUsdtMaticLpABI,
    address: mumbaiUsdtMaticLpAddress,
    functionName: "getReserves",
    ...config,
  } as UseContractReadConfig<typeof mumbaiUsdtMaticLpABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mumbaiUsdtMaticLpABI}__ and `functionName` set to `"kLast"`.
 */
export function useMumbaiUsdtMaticLpKLast<
  TFunctionName extends "kLast",
  TSelectData = ReadContractResult<typeof mumbaiUsdtMaticLpABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<
      typeof mumbaiUsdtMaticLpABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: mumbaiUsdtMaticLpABI,
    address: mumbaiUsdtMaticLpAddress,
    functionName: "kLast",
    ...config,
  } as UseContractReadConfig<typeof mumbaiUsdtMaticLpABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mumbaiUsdtMaticLpABI}__ and `functionName` set to `"name"`.
 */
export function useMumbaiUsdtMaticLpName<
  TFunctionName extends "name",
  TSelectData = ReadContractResult<typeof mumbaiUsdtMaticLpABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<
      typeof mumbaiUsdtMaticLpABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: mumbaiUsdtMaticLpABI,
    address: mumbaiUsdtMaticLpAddress,
    functionName: "name",
    ...config,
  } as UseContractReadConfig<typeof mumbaiUsdtMaticLpABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mumbaiUsdtMaticLpABI}__ and `functionName` set to `"nonces"`.
 */
export function useMumbaiUsdtMaticLpNonces<
  TFunctionName extends "nonces",
  TSelectData = ReadContractResult<typeof mumbaiUsdtMaticLpABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<
      typeof mumbaiUsdtMaticLpABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: mumbaiUsdtMaticLpABI,
    address: mumbaiUsdtMaticLpAddress,
    functionName: "nonces",
    ...config,
  } as UseContractReadConfig<typeof mumbaiUsdtMaticLpABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mumbaiUsdtMaticLpABI}__ and `functionName` set to `"price0CumulativeLast"`.
 */
export function useMumbaiUsdtMaticLpPrice0CumulativeLast<
  TFunctionName extends "price0CumulativeLast",
  TSelectData = ReadContractResult<typeof mumbaiUsdtMaticLpABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<
      typeof mumbaiUsdtMaticLpABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: mumbaiUsdtMaticLpABI,
    address: mumbaiUsdtMaticLpAddress,
    functionName: "price0CumulativeLast",
    ...config,
  } as UseContractReadConfig<typeof mumbaiUsdtMaticLpABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mumbaiUsdtMaticLpABI}__ and `functionName` set to `"price1CumulativeLast"`.
 */
export function useMumbaiUsdtMaticLpPrice1CumulativeLast<
  TFunctionName extends "price1CumulativeLast",
  TSelectData = ReadContractResult<typeof mumbaiUsdtMaticLpABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<
      typeof mumbaiUsdtMaticLpABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: mumbaiUsdtMaticLpABI,
    address: mumbaiUsdtMaticLpAddress,
    functionName: "price1CumulativeLast",
    ...config,
  } as UseContractReadConfig<typeof mumbaiUsdtMaticLpABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mumbaiUsdtMaticLpABI}__ and `functionName` set to `"symbol"`.
 */
export function useMumbaiUsdtMaticLpSymbol<
  TFunctionName extends "symbol",
  TSelectData = ReadContractResult<typeof mumbaiUsdtMaticLpABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<
      typeof mumbaiUsdtMaticLpABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: mumbaiUsdtMaticLpABI,
    address: mumbaiUsdtMaticLpAddress,
    functionName: "symbol",
    ...config,
  } as UseContractReadConfig<typeof mumbaiUsdtMaticLpABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mumbaiUsdtMaticLpABI}__ and `functionName` set to `"token0"`.
 */
export function useMumbaiUsdtMaticLpToken0<
  TFunctionName extends "token0",
  TSelectData = ReadContractResult<typeof mumbaiUsdtMaticLpABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<
      typeof mumbaiUsdtMaticLpABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: mumbaiUsdtMaticLpABI,
    address: mumbaiUsdtMaticLpAddress,
    functionName: "token0",
    ...config,
  } as UseContractReadConfig<typeof mumbaiUsdtMaticLpABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mumbaiUsdtMaticLpABI}__ and `functionName` set to `"token1"`.
 */
export function useMumbaiUsdtMaticLpToken1<
  TFunctionName extends "token1",
  TSelectData = ReadContractResult<typeof mumbaiUsdtMaticLpABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<
      typeof mumbaiUsdtMaticLpABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: mumbaiUsdtMaticLpABI,
    address: mumbaiUsdtMaticLpAddress,
    functionName: "token1",
    ...config,
  } as UseContractReadConfig<typeof mumbaiUsdtMaticLpABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mumbaiUsdtMaticLpABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useMumbaiUsdtMaticLpTotalSupply<
  TFunctionName extends "totalSupply",
  TSelectData = ReadContractResult<typeof mumbaiUsdtMaticLpABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<
      typeof mumbaiUsdtMaticLpABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: mumbaiUsdtMaticLpABI,
    address: mumbaiUsdtMaticLpAddress,
    functionName: "totalSupply",
    ...config,
  } as UseContractReadConfig<typeof mumbaiUsdtMaticLpABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mumbaiUsdtMaticLpABI}__.
 */
export function useMumbaiUsdtMaticLpWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof mumbaiUsdtMaticLpABI,
          string
        >["request"]["abi"],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof mumbaiUsdtMaticLpABI,
        TFunctionName,
        TMode
      > & {
        abi?: never;
      } = {} as any
) {
  return useContractWrite<typeof mumbaiUsdtMaticLpABI, TFunctionName, TMode>({
    abi: mumbaiUsdtMaticLpABI,
    address: mumbaiUsdtMaticLpAddress,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mumbaiUsdtMaticLpABI}__ and `functionName` set to `"approve"`.
 */
export function useMumbaiUsdtMaticLpApprove<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof mumbaiUsdtMaticLpABI,
          "approve"
        >["request"]["abi"],
        "approve",
        TMode
      > & { functionName?: "approve" }
    : UseContractWriteConfig<typeof mumbaiUsdtMaticLpABI, "approve", TMode> & {
        abi?: never;
        functionName?: "approve";
      } = {} as any
) {
  return useContractWrite<typeof mumbaiUsdtMaticLpABI, "approve", TMode>({
    abi: mumbaiUsdtMaticLpABI,
    address: mumbaiUsdtMaticLpAddress,
    functionName: "approve",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mumbaiUsdtMaticLpABI}__ and `functionName` set to `"burn"`.
 */
export function useMumbaiUsdtMaticLpBurn<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof mumbaiUsdtMaticLpABI,
          "burn"
        >["request"]["abi"],
        "burn",
        TMode
      > & { functionName?: "burn" }
    : UseContractWriteConfig<typeof mumbaiUsdtMaticLpABI, "burn", TMode> & {
        abi?: never;
        functionName?: "burn";
      } = {} as any
) {
  return useContractWrite<typeof mumbaiUsdtMaticLpABI, "burn", TMode>({
    abi: mumbaiUsdtMaticLpABI,
    address: mumbaiUsdtMaticLpAddress,
    functionName: "burn",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mumbaiUsdtMaticLpABI}__ and `functionName` set to `"initialize"`.
 */
export function useMumbaiUsdtMaticLpInitialize<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof mumbaiUsdtMaticLpABI,
          "initialize"
        >["request"]["abi"],
        "initialize",
        TMode
      > & { functionName?: "initialize" }
    : UseContractWriteConfig<
        typeof mumbaiUsdtMaticLpABI,
        "initialize",
        TMode
      > & {
        abi?: never;
        functionName?: "initialize";
      } = {} as any
) {
  return useContractWrite<typeof mumbaiUsdtMaticLpABI, "initialize", TMode>({
    abi: mumbaiUsdtMaticLpABI,
    address: mumbaiUsdtMaticLpAddress,
    functionName: "initialize",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mumbaiUsdtMaticLpABI}__ and `functionName` set to `"mint"`.
 */
export function useMumbaiUsdtMaticLpMint<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof mumbaiUsdtMaticLpABI,
          "mint"
        >["request"]["abi"],
        "mint",
        TMode
      > & { functionName?: "mint" }
    : UseContractWriteConfig<typeof mumbaiUsdtMaticLpABI, "mint", TMode> & {
        abi?: never;
        functionName?: "mint";
      } = {} as any
) {
  return useContractWrite<typeof mumbaiUsdtMaticLpABI, "mint", TMode>({
    abi: mumbaiUsdtMaticLpABI,
    address: mumbaiUsdtMaticLpAddress,
    functionName: "mint",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mumbaiUsdtMaticLpABI}__ and `functionName` set to `"permit"`.
 */
export function useMumbaiUsdtMaticLpPermit<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof mumbaiUsdtMaticLpABI,
          "permit"
        >["request"]["abi"],
        "permit",
        TMode
      > & { functionName?: "permit" }
    : UseContractWriteConfig<typeof mumbaiUsdtMaticLpABI, "permit", TMode> & {
        abi?: never;
        functionName?: "permit";
      } = {} as any
) {
  return useContractWrite<typeof mumbaiUsdtMaticLpABI, "permit", TMode>({
    abi: mumbaiUsdtMaticLpABI,
    address: mumbaiUsdtMaticLpAddress,
    functionName: "permit",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mumbaiUsdtMaticLpABI}__ and `functionName` set to `"skim"`.
 */
export function useMumbaiUsdtMaticLpSkim<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof mumbaiUsdtMaticLpABI,
          "skim"
        >["request"]["abi"],
        "skim",
        TMode
      > & { functionName?: "skim" }
    : UseContractWriteConfig<typeof mumbaiUsdtMaticLpABI, "skim", TMode> & {
        abi?: never;
        functionName?: "skim";
      } = {} as any
) {
  return useContractWrite<typeof mumbaiUsdtMaticLpABI, "skim", TMode>({
    abi: mumbaiUsdtMaticLpABI,
    address: mumbaiUsdtMaticLpAddress,
    functionName: "skim",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mumbaiUsdtMaticLpABI}__ and `functionName` set to `"swap"`.
 */
export function useMumbaiUsdtMaticLpSwap<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof mumbaiUsdtMaticLpABI,
          "swap"
        >["request"]["abi"],
        "swap",
        TMode
      > & { functionName?: "swap" }
    : UseContractWriteConfig<typeof mumbaiUsdtMaticLpABI, "swap", TMode> & {
        abi?: never;
        functionName?: "swap";
      } = {} as any
) {
  return useContractWrite<typeof mumbaiUsdtMaticLpABI, "swap", TMode>({
    abi: mumbaiUsdtMaticLpABI,
    address: mumbaiUsdtMaticLpAddress,
    functionName: "swap",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mumbaiUsdtMaticLpABI}__ and `functionName` set to `"sync"`.
 */
export function useMumbaiUsdtMaticLpSync<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof mumbaiUsdtMaticLpABI,
          "sync"
        >["request"]["abi"],
        "sync",
        TMode
      > & { functionName?: "sync" }
    : UseContractWriteConfig<typeof mumbaiUsdtMaticLpABI, "sync", TMode> & {
        abi?: never;
        functionName?: "sync";
      } = {} as any
) {
  return useContractWrite<typeof mumbaiUsdtMaticLpABI, "sync", TMode>({
    abi: mumbaiUsdtMaticLpABI,
    address: mumbaiUsdtMaticLpAddress,
    functionName: "sync",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mumbaiUsdtMaticLpABI}__ and `functionName` set to `"transfer"`.
 */
export function useMumbaiUsdtMaticLpTransfer<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof mumbaiUsdtMaticLpABI,
          "transfer"
        >["request"]["abi"],
        "transfer",
        TMode
      > & { functionName?: "transfer" }
    : UseContractWriteConfig<typeof mumbaiUsdtMaticLpABI, "transfer", TMode> & {
        abi?: never;
        functionName?: "transfer";
      } = {} as any
) {
  return useContractWrite<typeof mumbaiUsdtMaticLpABI, "transfer", TMode>({
    abi: mumbaiUsdtMaticLpABI,
    address: mumbaiUsdtMaticLpAddress,
    functionName: "transfer",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mumbaiUsdtMaticLpABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useMumbaiUsdtMaticLpTransferFrom<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof mumbaiUsdtMaticLpABI,
          "transferFrom"
        >["request"]["abi"],
        "transferFrom",
        TMode
      > & { functionName?: "transferFrom" }
    : UseContractWriteConfig<
        typeof mumbaiUsdtMaticLpABI,
        "transferFrom",
        TMode
      > & {
        abi?: never;
        functionName?: "transferFrom";
      } = {} as any
) {
  return useContractWrite<typeof mumbaiUsdtMaticLpABI, "transferFrom", TMode>({
    abi: mumbaiUsdtMaticLpABI,
    address: mumbaiUsdtMaticLpAddress,
    functionName: "transferFrom",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mumbaiUsdtMaticLpABI}__.
 */
export function usePrepareMumbaiUsdtMaticLpWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mumbaiUsdtMaticLpABI, TFunctionName>,
    "abi" | "address"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: mumbaiUsdtMaticLpABI,
    address: mumbaiUsdtMaticLpAddress,
    ...config,
  } as UsePrepareContractWriteConfig<typeof mumbaiUsdtMaticLpABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mumbaiUsdtMaticLpABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareMumbaiUsdtMaticLpApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mumbaiUsdtMaticLpABI, "approve">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: mumbaiUsdtMaticLpABI,
    address: mumbaiUsdtMaticLpAddress,
    functionName: "approve",
    ...config,
  } as UsePrepareContractWriteConfig<typeof mumbaiUsdtMaticLpABI, "approve">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mumbaiUsdtMaticLpABI}__ and `functionName` set to `"burn"`.
 */
export function usePrepareMumbaiUsdtMaticLpBurn(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mumbaiUsdtMaticLpABI, "burn">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: mumbaiUsdtMaticLpABI,
    address: mumbaiUsdtMaticLpAddress,
    functionName: "burn",
    ...config,
  } as UsePrepareContractWriteConfig<typeof mumbaiUsdtMaticLpABI, "burn">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mumbaiUsdtMaticLpABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareMumbaiUsdtMaticLpInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mumbaiUsdtMaticLpABI, "initialize">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: mumbaiUsdtMaticLpABI,
    address: mumbaiUsdtMaticLpAddress,
    functionName: "initialize",
    ...config,
  } as UsePrepareContractWriteConfig<typeof mumbaiUsdtMaticLpABI, "initialize">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mumbaiUsdtMaticLpABI}__ and `functionName` set to `"mint"`.
 */
export function usePrepareMumbaiUsdtMaticLpMint(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mumbaiUsdtMaticLpABI, "mint">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: mumbaiUsdtMaticLpABI,
    address: mumbaiUsdtMaticLpAddress,
    functionName: "mint",
    ...config,
  } as UsePrepareContractWriteConfig<typeof mumbaiUsdtMaticLpABI, "mint">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mumbaiUsdtMaticLpABI}__ and `functionName` set to `"permit"`.
 */
export function usePrepareMumbaiUsdtMaticLpPermit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mumbaiUsdtMaticLpABI, "permit">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: mumbaiUsdtMaticLpABI,
    address: mumbaiUsdtMaticLpAddress,
    functionName: "permit",
    ...config,
  } as UsePrepareContractWriteConfig<typeof mumbaiUsdtMaticLpABI, "permit">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mumbaiUsdtMaticLpABI}__ and `functionName` set to `"skim"`.
 */
export function usePrepareMumbaiUsdtMaticLpSkim(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mumbaiUsdtMaticLpABI, "skim">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: mumbaiUsdtMaticLpABI,
    address: mumbaiUsdtMaticLpAddress,
    functionName: "skim",
    ...config,
  } as UsePrepareContractWriteConfig<typeof mumbaiUsdtMaticLpABI, "skim">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mumbaiUsdtMaticLpABI}__ and `functionName` set to `"swap"`.
 */
export function usePrepareMumbaiUsdtMaticLpSwap(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mumbaiUsdtMaticLpABI, "swap">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: mumbaiUsdtMaticLpABI,
    address: mumbaiUsdtMaticLpAddress,
    functionName: "swap",
    ...config,
  } as UsePrepareContractWriteConfig<typeof mumbaiUsdtMaticLpABI, "swap">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mumbaiUsdtMaticLpABI}__ and `functionName` set to `"sync"`.
 */
export function usePrepareMumbaiUsdtMaticLpSync(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mumbaiUsdtMaticLpABI, "sync">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: mumbaiUsdtMaticLpABI,
    address: mumbaiUsdtMaticLpAddress,
    functionName: "sync",
    ...config,
  } as UsePrepareContractWriteConfig<typeof mumbaiUsdtMaticLpABI, "sync">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mumbaiUsdtMaticLpABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareMumbaiUsdtMaticLpTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mumbaiUsdtMaticLpABI, "transfer">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: mumbaiUsdtMaticLpABI,
    address: mumbaiUsdtMaticLpAddress,
    functionName: "transfer",
    ...config,
  } as UsePrepareContractWriteConfig<typeof mumbaiUsdtMaticLpABI, "transfer">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mumbaiUsdtMaticLpABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareMumbaiUsdtMaticLpTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mumbaiUsdtMaticLpABI, "transferFrom">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: mumbaiUsdtMaticLpABI,
    address: mumbaiUsdtMaticLpAddress,
    functionName: "transferFrom",
    ...config,
  } as UsePrepareContractWriteConfig<typeof mumbaiUsdtMaticLpABI, "transferFrom">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mumbaiUsdtMaticLpABI}__.
 */
export function useMumbaiUsdtMaticLpEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof mumbaiUsdtMaticLpABI, TEventName>,
    "abi" | "address"
  > = {} as any
) {
  return useContractEvent({
    abi: mumbaiUsdtMaticLpABI,
    address: mumbaiUsdtMaticLpAddress,
    ...config,
  } as UseContractEventConfig<typeof mumbaiUsdtMaticLpABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mumbaiUsdtMaticLpABI}__ and `eventName` set to `"Approval"`.
 */
export function useMumbaiUsdtMaticLpApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof mumbaiUsdtMaticLpABI, "Approval">,
    "abi" | "address" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: mumbaiUsdtMaticLpABI,
    address: mumbaiUsdtMaticLpAddress,
    eventName: "Approval",
    ...config,
  } as UseContractEventConfig<typeof mumbaiUsdtMaticLpABI, "Approval">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mumbaiUsdtMaticLpABI}__ and `eventName` set to `"Burn"`.
 */
export function useMumbaiUsdtMaticLpBurnEvent(
  config: Omit<
    UseContractEventConfig<typeof mumbaiUsdtMaticLpABI, "Burn">,
    "abi" | "address" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: mumbaiUsdtMaticLpABI,
    address: mumbaiUsdtMaticLpAddress,
    eventName: "Burn",
    ...config,
  } as UseContractEventConfig<typeof mumbaiUsdtMaticLpABI, "Burn">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mumbaiUsdtMaticLpABI}__ and `eventName` set to `"Mint"`.
 */
export function useMumbaiUsdtMaticLpMintEvent(
  config: Omit<
    UseContractEventConfig<typeof mumbaiUsdtMaticLpABI, "Mint">,
    "abi" | "address" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: mumbaiUsdtMaticLpABI,
    address: mumbaiUsdtMaticLpAddress,
    eventName: "Mint",
    ...config,
  } as UseContractEventConfig<typeof mumbaiUsdtMaticLpABI, "Mint">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mumbaiUsdtMaticLpABI}__ and `eventName` set to `"Swap"`.
 */
export function useMumbaiUsdtMaticLpSwapEvent(
  config: Omit<
    UseContractEventConfig<typeof mumbaiUsdtMaticLpABI, "Swap">,
    "abi" | "address" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: mumbaiUsdtMaticLpABI,
    address: mumbaiUsdtMaticLpAddress,
    eventName: "Swap",
    ...config,
  } as UseContractEventConfig<typeof mumbaiUsdtMaticLpABI, "Swap">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mumbaiUsdtMaticLpABI}__ and `eventName` set to `"Sync"`.
 */
export function useMumbaiUsdtMaticLpSyncEvent(
  config: Omit<
    UseContractEventConfig<typeof mumbaiUsdtMaticLpABI, "Sync">,
    "abi" | "address" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: mumbaiUsdtMaticLpABI,
    address: mumbaiUsdtMaticLpAddress,
    eventName: "Sync",
    ...config,
  } as UseContractEventConfig<typeof mumbaiUsdtMaticLpABI, "Sync">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mumbaiUsdtMaticLpABI}__ and `eventName` set to `"Transfer"`.
 */
export function useMumbaiUsdtMaticLpTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof mumbaiUsdtMaticLpABI, "Transfer">,
    "abi" | "address" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: mumbaiUsdtMaticLpABI,
    address: mumbaiUsdtMaticLpAddress,
    eventName: "Transfer",
    ...config,
  } as UseContractEventConfig<typeof mumbaiUsdtMaticLpABI, "Transfer">);
}
